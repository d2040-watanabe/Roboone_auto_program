#include "motion.hpp"
#include "standard.hpp"
#include "control.hpp"
#include "gyro.hpp"
#include "Invkinema.hpp"
#include <Arduino.h>

/*サーボの配置(腰ヨー、右足腿ロール、右足腿ピッチ、右足脛ピッチ、右足首ロール、左足腿ロール、左足腿ピッチ、左足脛ピッチ、左足首ロール、右手ヨー、右手ロール、左手ヨー、左手ロール)*/

void Neutral_Pos()
{
  for (int i = 0; i < 20; i++)
  {
    Set_Pos_All(0, 1000, 200 * i, -200 * i, 100 * i, -1000, -200 * i, 200 * i, -100 * i, -4500 + 225 * i, -4500 + 25 * i, 4500 - 225 * i, 4500 - 25 * i);
    delay(50);
        // setPosInvLeg(0, 0, 0, 0, 20, 0, 0, 20);
  }
  // Set_Pos_All(0, 1000, 4000, -4000, 1000, -1000, -4000, 4000, -1000, -8000, -4000, 8000, 4000);
  // delay(100);1
  // ReadVS2();
}
void Neutral_Pos2()
{
  // Set_Pos_All(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);

  //ストレッチ設定
  krs.setStrc(0, 10);
  krs.setStrc(1, 10);
  krs.setStrc(2, 10);
  krs.setStrc(3, 10);
  krs.setStrc(4, 10);
  krs.setStrc(5, 10);
  krs.setStrc(6, 10);
  krs.setStrc(7, 10);
  krs.setStrc(8, 10);
  krs.setStrc(9, 10);
  krs.setStrc(10, 10);
  krs.setStrc(11, 10);
  krs.setStrc(12, 10);

  // //元のデータ
  Set_Pos_All(0, 2000, 4000, -4000, 2000, -2000, -4000, 4000, -2000, 0, -4900, 0, 4900);
  //walk_5m用
  // Set_Pos_All(0, 800, 3000, -3000, 200, -800, -3000, 3000, -200, 0, -4000, 0, 4000);

  delay(10);
  // setPosInvLeg(0, 0, 11.9, 70.2, 34.1, 11.9, 70.2, 34.1);
  // if (theta < -0.01)
  //   slip_F();
  // else if (theta > 0.05)
  //   slip_B();
  // // gyro_y or acc_zの値を
  // else if (gyro_y < -75 || acc_z < -0.3)
  //   slip_FS();
  // else if (acc_z > -0.185)
  //   slide_ch();
  // krs.setFree(10);
  // krs.setFree(12);
  // ReadVS2();
  // if (BIT_L3)
  // {
  //   while (BIT_L3)
  //   {
  //     krs.setFree(10);
  //     krs.setFree(12);
  //     // ReadVS2();
  //   }
  //   krs.setStrc(10, 90);
  //   krs.setStrc(12, 90);
  // }
  // delay(20);
}

void Walk_Forward()
{
/*
  bool flag_wf = true;
  bool flag_wf2 = false;
  krs.setStrc(1, 30);
  krs.setStrc(2, 60);
  krs.setStrc(3, 60);
  krs.setStrc(4, 60);
  krs.setStrc(5, 30);
  krs.setStrc(6, 60);
  krs.setStrc(7, 60);
  krs.setStrc(8, 60);
  Set_Pos_All(0, 1000, 3000, -3000, 3000, -1000, -3000, 3000, -3000, 0, -4000, 0, 4000);
  delay(200);
  Set_Pos_All(0, 500, 3000, -3000, 1000, -500, -3000, 3000, -1000, 0, -4000, 0, 4000);
  delay(100);
  // set_arm(0, -4000, 0, 4000);
  // setPosInvLeg(-500, 0, 0, 0, 27.3, 30, 15, 62.1);
  // delay(100);
  // setPosInvLeg(500, 500, 0, 15, 27.3, 30, -5, 27.3);
  // set_arm(-9000, -4000, 0, 4000);
  // delay(200);
  while (1)
  {
    if (!BIT_up)
      break;
    // Set_Pos_All(0, -500, 3900, -3900, -1000, -1000, -6000, 6000, -1000, 0, -4000, 4500, 4000);
    //右乗せ
    // set_arm(0, -4000, 9000, 4000);
    else if (flag_wf == true)
    {
      // z:roll axis direction
      // y:pitch axis direction
      // x:yaw axis direction
      flag_wf = false;
      flag_wf2 = true;
      // set_arm(0, -4000, 0, 4000);
      setPosInvLeg(0, 0, 0, -15, 27.3, 10, 29.1, 62.1);
      delay(50);
      //高さ同じ
      setPosInvLeg(0, 0, 0, 15, 27.3, 10, -5, 27.3);
      // set_arm(-9000, -4000, 0, 4000);
      delay(100);
      //左乗せ
      setPosInvLeg(0, 0, 10, 29.1, 62.1, 0, -15, 27.3);
      // set_arm(0, -4000, 0, 4000);
      delay(50);
      //高さ同じ
      setPosInvLeg(0, 0, 10, -5, 27.3, 0, 15, 27.3);
      // set_arm(0, -4000, 9000, 4000);
      delay(100);

      if (!BIT_up)
        break;
    }

    else if (flag_wf2 == true)
    {
      flag_wf2 = false;
      setPosInvLeg(0, 0, 0, -15, 27.3, 20, 29.1, 62.1);
      delay(50);
      //高さ同じ
      setPosInvLeg(0, 0, 0, 15, 27.3, 20, -5, 27.3);
      // set_arm(-9000, -4000, 0, 4000);
      delay(100);
      //左乗せ
      setPosInvLeg(0, 0, 20, 29.1, 62.1, 0, -15, 27.3);
      // set_arm(0, -4000, 0, 4000);
      delay(50);
      //高さ同じ
      setPosInvLeg(0, 0, 20, -5, 27.3, 0, 15, 27.3);
      // set_arm(0, -4000, 9000, 4000);
      delay(100);

    if (!BIT_up)
      break;
    }
    // else if (theta > 0.05 && theta < 0.1)
    else
    {
      setPosInvLeg(-100, 0, 0, 0, 27.3, 20, 29.1, 62.1);
      delay(50);
      //高さ同じ
      setPosInvLeg(0, 0, -5, 15, 27.3, 20, -5, 27.3);
      // set_arm(-9000, -4000, 0, 4000);
      delay(100);
      //左乗せ
      setPosInvLeg(0, 100, 20, 29.1, 62.1, 0, 0, 27.3);
      // set_arm(0, -4000, 0, 4000);
      delay(50);
      //高さ同じ
      setPosInvLeg(0, 0, 20, -5, 27.3, -5, 15, 27.3);
      // set_arm(0, -4000, 9000, 4000);
      delay(100);
      // }
    }
  }*/
  
  


  // best
  krs.setStrc(2, 60);
  krs.setStrc(3, 60);
  krs.setStrc(4, 60);
  krs.setStrc(6, 60);
  krs.setStrc(7, 60);
  krs.setStrc(8, 60);
  
  Set_Pos_All(0, 500, 4000, -4000, 2000, -500, -4000, 4000, -2000, 0, -4000, 0, 4000);
  delay(200);
  Set_Pos_All(0, 500, 4000, -4000, 500, -500, -6000, 6000, -300, 0, -4000, 0, 4000);
  delay(40);
  Set_Pos_All(0, 500, 4000, -4000, 500, -500, -3700, 2700, -300, 0, -4000, 0, 4000);
  delay(80);
  Set_Pos_All(0, 500, 6000, -6000, 500, -500, -4000, 4000, -300, 0, -4000, 0, 4000);
  delay(40);
  Set_Pos_All(0, 500, 3700, -2700, 500, -500, -4000, 4000, -300, 0, -4000, 0, 4000);
  delay(80);
  while (BIT_up)
  {
    Set_Pos_All(0, 500, 4000, -4000, 500, -500, -6000, 6000, 0, 0, -4000, 0, 4000);
    delay(20);
    Set_Pos_All(0, 500, 4000, -4000, 500, -500, -5600, 1900, 0, 0, -4000, 0, 4000);
    delay(40);
    Set_Pos_All(0, 500, 6000, -6000, 500, -500, -4000, 4000, 0, 0, -4000, 0, 4000);
    delay(20);
    Set_Pos_All(0, 500, 5600, -1900, 500, -500, -4000, 4000, 0, 0, -4000, 0, 4000);
    delay(40);
  }
  

  /*2/28
  krs.setStrc(2, 60);
  krs.setStrc(3, 60);
  krs.setStrc(4, 60);
  krs.setStrc(6, 60);
  krs.setStrc(7, 60);
  krs.setStrc(8, 60);
  
  Set_Pos_All(0, 500, 4000, -4000, 2000, -500, -4000, 4000, -2000, 0, -4000, 0, 4000);
  delay(200);
  Set_Pos_All(0, 500, 4000, -4000, 500, -500, -6000, 6000, -500, 0, -4000, 0, 4000);
  delay(40);
  Set_Pos_All(0, 500, 4000, -4000, 500, -500, -3700, 2700, -500, 0, -4000, 0, 4000);
  delay(80);
  Set_Pos_All(0, 500, 6000, -6000, 500, -500, -4000, 4000, -500, 0, -4000, 0, 4000);
  delay(40);
  Set_Pos_All(0, 500, 3700, -2700, 500, -500, -4000, 4000, -500, 0, -4000, 0, 4000);
  delay(80);
  while (BIT_up)
  {
    Set_Pos_All(0, 500, 4000, -4000, 500, -500, -6000, 6000, -500, 0, -4000, 0, 4000);
    delay(20);
    Set_Pos_All(0, 500, 4000, -4000, 500, -500, -5600, 1900, -500, 0, -4000, 0, 4000);
    delay(40);
    Set_Pos_All(0, 500, 6000, -6000, 500, -500, -4000, 4000, -500, 0, -4000, 0, 4000);
    delay(20);
    Set_Pos_All(0, 500, 5600, -1900, 500, -500, -4000, 4000, -500, 0, -4000, 0, 4000);
    delay(40);
  }*/

}

void Walk_Backward()
{
  krs.setStrc(2, 60);
  krs.setStrc(3, 60);
  krs.setStrc(4, 60);
  krs.setStrc(6, 60);
  krs.setStrc(7, 60);
  krs.setStrc(8, 60);
  /*
  Set_Pos_All(0, 1500, 3300, -3300, 1600, -1000, -4500, 4500, -800, 0, -4000, 0, 4000);
  delay(60);
  Set_Pos_All(0, 1500, 1700, -5700, 1800, -700, -4800, 4800, -600, 0, -4000, 0, 4000);
  delay(60);
  Set_Pos_All(0, 1500, 1300, -5700, 1500, -700, -4800, 4800, -600, 0, -4000, 0, 4000);
  delay(30);
  while (BIT_down)
  {
    Set_Pos_All(0, 800, 3800, -5700, 800, -1200, -4700, 3300, -1400, 0, -4000, 0, 4000);
    delay(30);
    Set_Pos_All(0, 800, 4300, -4300, 1000, -1200, -3300, 5700, -1400, 0, -4000, 0, 4000);
    delay(45);
    Set_Pos_All(0, 800, 4300, -4300, 1000, -1200, -2700, 5700, -1000, 0, -4000, 0, 4000);
    delay(15);
    Set_Pos_All(0, 1200, 4700, -3300, 1400, -800, -3800, 5700, -800, 0, -4000, 0, 4000);
    delay(30);
    Set_Pos_All(0, 1200, 3300, -5700, 1400, -800, -4300, 4300, -1000, 0, -4000, 0, 4000);
    delay(45);
    Set_Pos_All(0, 1200, 2700, -5700, 1000, -800, -4300, 4300, -1000, 0, -4000, 0, 4000);
    delay(15);
  }

    Set_Pos_All(0, 1200, 3800, -5700, 800, -1500, -5200, 4000, -1700, 0, -4000, 0, 4000);
    delay(60);
    Set_Pos_All(0, 1200, 4300, -4800, 1000, -1500, -4000, 4800, -1900, 0, -4000, 0, 4000);
    delay(75);
    Set_Pos_All(0, 1500, 4200, -4200, 1400, -1500, -4200, 4200, -1400, 0, -4000, 0, 4000);
    delay(90);
    Set_Pos_All(0, 2000, 4200, -4200, 1400, -2000, -4200, 4200, -1400, 0, -4000, 0, 4000);
    delay(90);
    */

//元のデータ
  Set_Pos_All(0, 500, 4000, -4000, 2000, -500, -4000, 4000, -2000, 0, -4000, 0, 4000);
  delay(200);
  Set_Pos_All(0, 500, 4000, -4000, 500, -500, -6000, 6000, -500, 0, -4000, 0, 4000);
  delay(40);
  Set_Pos_All(0, 500, 4000, -4000, 500, -500, -2700, 3700, -500, 0, -4000, 0, 4000);
  delay(80);
  Set_Pos_All(0, 500, 6000, -6000, 500, -500, -4000, 4000, -500, 0, -4000, 0, 4000);
  delay(40);
  Set_Pos_All(0, 500, 2700, -3700, 500, -500, -4000, 4000, -500, 0, -4000, 0, 4000);
  delay(80);
  while (BIT_down)
  {
    Set_Pos_All(0, 500, 4000, -4000, 500, -500, -6000, 6000, -500, 0, -4000, 0, 4000);
    delay(20);
    Set_Pos_All(0, 500, 4000, -4000, 500, -500, -1900, 5600, -500, 0, -4000, 0, 4000);
    delay(40);
    Set_Pos_All(0, 500, 6000, -6000, 500, -500, -4000, 4000, -500, 0, -4000, 0, 4000);
    delay(20);
    Set_Pos_All(0, 500, 1900, -5600, 500, -500, -4000, 4000, -500, 0, -4000, 0, 4000);
    delay(40);
    // ReadVS2();
  }  
}

void Walk_Right()
{
  krs.setStrc(1, 10);
  krs.setStrc(2, 10);
  krs.setStrc(3, 10);
  krs.setStrc(4, 10);
  krs.setStrc(5, 65);
  krs.setStrc(6, 65);
  krs.setStrc(7, 65);
  krs.setStrc(8, 60);
  delay(20);

  if (BIT_R1)
  {
    Set_Pos_All(0, -600, 3800, -3800, 700, 600, -3800, 3800, 300, 0, -4000, 0, 4000);
    delay(20);
    while (BIT_R1)
    {
      Set_Pos_All(0, 0, 4000, -4000, 1000, 600, -4000, 4000, 0, 0, -4000, 0, 4000);
      delay(0);
      Set_Pos_All(2000, 1200, 4000, -4000, 1000, -1200, -4000, 4000, 0, 0, -4000, 0, 4000);
      delay(40);
      // ReadVS2();
    }
  }

  // walk
  else
  {
    Set_Pos_All(0, 1600, 3600, -3600, 2800, -3300, -3000, 3000, -1200, 0, -4000, 0, 4000);
    delay(30);

    while (BIT_right)
    {
      Set_Pos_All(0, 1500, 3600, -3600, 3700, -3300, -2300, 2300, -1200, 0, -4000, 0, 4000);
      delay(20);
      Set_Pos_All(0, 1100, 2800, -3400, 3400, -2000, -4000, 4000, -2500, 0, -4000, 0, 4000);
      delay(60);  
      Set_Pos_All(0, 1600, 3600, -3600, 3400, -3300, -3000, 3000, -1200, 0, -4000, 0, 4000);
      delay(0);
      
      /* Set_Pos_All(0, 1500, 3600, -3600, 3700, -3300, -2300, 2300, -1200, 0, -4000, 0, 4000);
      delay(30);
      Set_Pos_All(0, 1100, 3500, -3400, 3400, -2000, -4000, 4000, -2500, 0, -4000, 0, 4000);
      delay(40);  
      Set_Pos_All(0, 1600, 3600, -3600, 3400, -3300, -3000, 3000, -1200, 0, -4000, 0, 4000);
      delay(60);*/
    }
  }

  /* 20240225 修正前
  if (BIT_R1)
  {
    Set_Pos_All(0, -600, 3800, -3800, 700, 600, -3800, 3800, 300, 0, -4000, 0, 4000);
    delay(20);
    while (BIT_R1)
    {
      Set_Pos_All(0, 0, 4000, -4000, 1000, 600, -4000, 4000, 0, 0, -4000, 0, 4000);
      delay(40);
      Set_Pos_All(2000, 1200, 4000, -4000, 1000, -1200, -4000, 4000, 0, 0, -4000, 0, 4000);
      delay(40);
      // ReadVS2();
    }
  }

  // walk
  else
  {
    Set_Pos_All(0, 1600, 3600, -3600, 2200, -3300, -3000, 3000, -1200, 0, -4000, 0, 4000);
    delay(60);

    while (BIT_right)
    {
      Set_Pos_All(0, 1500, 3600, -3600, 2500, -3300, -2300, 2300, -1200, 0, -4000, 0, 4000);
      delay(30);
      Set_Pos_All(0, 700, 3300, -3300, 2200, -2000, -4000, 4000, -2500, 0, -4000, 0, 4000);
      delay(40);
      Set_Pos_All(0, 1600, 3600, -3600, 2200, -3300, -3000, 3000, -1200, 0, -4000, 0, 4000);
      delay(60);
    }
  }*/

  /*元のデータ
  else
  {
    Set_Pos_All(0, 2000, 3000, -3000, 2500, -3000, -2000, 2000, -1500, 0, -4000, 0, 4000);
    delay(100);
    while (BIT_right)
    {
      Set_Pos_All(0, 2000, 2000, -2000, 2500, -1500, -3000, 3000, -1500, 0, -4000, 0, 4000);
      delay(100);
      Set_Pos_All(0, 2000, 3000, -3000, 2500, -3000, -2000, 2000, -1500, 0, -4000, 0, 4000);
      delay(100);
    }
  }*/
}


void Walk_Left()
{
  krs.setStrc(1, 60);
  krs.setStrc(2, 60);
  krs.setStrc(3, 60);
  krs.setStrc(4, 60);
  krs.setStrc(5, 10);
  krs.setStrc(6, 10);
  krs.setStrc(7, 10);
  krs.setStrc(8, 10);
  delay(20);
  // slalom
  if (BIT_L1)
  {
    Set_Pos_All(0, -1000, 4000, -4000, -500, 1000, -3800, 3800, -1000, -9000, -4000, 9000, 4000);
    delay(30);
    while (BIT_L1)
    {
      Set_Pos_All(0, 0, 3800, -3800, 0, 0, -3800, 3800, -1000, -9000, -4000, 9000, 4000);
      delay(30);
      Set_Pos_All(0, 1500, 4200, -4000, 0, -1500, -4200, 4000, -2000, -9000, -4000, 9000, 4000);
      delay(40);
      // ReadVS2();
    }
  }

  // walk
  else
  {
    Set_Pos_All(0, 3300, 3000, -3000, 1200, -1600, -3600, 3600, -2800, 0, -4000, 0, 4000);
    delay(30);

    while (BIT_left)
    {
      Set_Pos_All(0, 3300, 2300, -2300, 1200, -1500, -3600, 3600, -3700, 0, -4000, 0, 4000);
      delay(20);
      Set_Pos_All(0, 2000, 4000, -4000, 2500, -1100, -2800, 3400, -3400, 0, -4000, 0, 4000);
      delay(60);
      Set_Pos_All(0, 3300, 3000, -3000, 1200, -1600, -3600, 3600, -3400, 0, -4000, 0, 4000);
      delay(0);
      
    }
  }
  /*元データ
  else
  {
    Set_Pos_All(0, 3000, 2000, -2000, 1500, -2000, -3000, 3000, -2500, 0, -4000, 0, 4000);
    delay(100);

    while (BIT_left)
    {
      Set_Pos_All(0, 1500, 3000, -3000, 1500, -2000, -2000, 2000, -2500, 0, -4000, 0, 4000);
      delay(100);
      Set_Pos_All(0, 3000, 2000, -2000, 1500, -2000, -3000, 3000, -2500, 0, -4000, 0, 4000);
      delay(100);
    }
  }*/
}


void Turn_Right()
{
  krs.setStrc(1, 60);
  krs.setStrc(5, 60);
 
  krs.setStrc(0, 60);
  krs.setStrc(2, 60);
  krs.setStrc(3, 60);
  krs.setStrc(6, 60);
  krs.setStrc(7, 60);
  while (BIT_R1)
  {
    Set_Pos_All(3000, 1500, 2200, -2200, 3500, -1500, -2200, 2200, -3500, 0, -4500, 0, 4500);
    delay(50);
    Set_Pos_All(0, 2000, 4000, -4000, 3000, -2000, -4000, 4000, -3000, 0, -4500, 0, 4500);
    delay(80);
    // 元のデータ
    /*
    Set_Pos_All(3000, 2000, 2200, -2200, 2000, -2000, -2200, 2200, -2000, 0, -4500, 0, 4500);
    delay(60);
    Set_Pos_All(0, 2000, 4000, -4000, 2000, -2000, -4000, 4000, -2000, 0, -4500, 0, 4500);
    delay(60);
    */
  }
}

void Turn_Left()
{
  {
    krs.setStrc(1, 60);
    krs.setStrc(5, 60);

    krs.setStrc(0, 60);
    krs.setStrc(2, 60);
    krs.setStrc(3, 60);
    krs.setStrc(6, 60);
    krs.setStrc(7, 60);
    while (BIT_L1)
    {
      Set_Pos_All(-3000, 1500, 2200, -2200, 3500, -1500, -2200, 2200, -3500, 0, -4500, 0, 4500);
      delay(60);
      Set_Pos_All(0, 2000, 4000, -4000, 3000, -2000, -4000, 4000, -3000, 0, -4500, 0, 4500);
      delay(100);
      /*元のデータ
      Set_Pos_All(-3000, 2000, 2200, -2200, 2000, -2000, -2200, 2200, -2000, 0, -4500, 0, 4500);
      delay(60);
      Set_Pos_All(0, 2000, 4000, -4000, 2000, -2000, -4000, 4000, -2000, 0, -4500, 0, 4500);
      delay(60);
      */
    }
  }
}
void Squat()
{
  krs.setStrc(1, 60);
  krs.setStrc(2, 60);
  krs.setStrc(3, 60);
  krs.setStrc(4, 60);
  krs.setStrc(5, 60);
  krs.setStrc(6, 60);
  krs.setStrc(7, 60);
  krs.setStrc(8, 60);
  delay(20);
  Set_Pos_All(0, 4500, 9000, -9000, 4000, -4500, -9000, 9000, -4000, -3000, -1500, 3000, 1500);
  delay(30);
  while (BIT_batu)
  {
    Set_Pos_All(0, 4500, 9000, -9000, 4000, -4500, -9000, 9000, -4000, -3000, -1000, 3000, 1000);
    delay(10);
    // ReadVS2();
  }
  // delay(20);
  Set_Pos_All(0, 2000, 9000, -9000, 4000, -2000, -9000, 9000, -4000, 0, -1000, 0, 1000);
  delay(30);
  Set_Pos_All(0, 2000, 7000, -5000, 2000, -2000, -7000, 5000, -2000, 0, -4000, 0, 4000);
  delay(100);
}

void Attack_Right()
{
  krs.setStrc(0, 65);
  Set_Pos_All(-4500, 2000, 2000, -4500, 2500, -1000, 0, 2000, -2000, -4500, -4500, 0, 4500);
  delay(10);
  krs.setStrc(1, 60);
  krs.setStrc(5, 60);
  krs.setStrc(9, 60);
  krs.setStrc(10, 70);
  while (BIT_maru)
    {
      //対低重心試作
      // Set_Pos_All(-4500, 4500, 4500, -4500, 2500, -1200, -4500, 4500, -2000, -4500, 9000, 0, 4500);
      // delay(20);
      
      //高い打点
      Set_Pos_All(-4500, 2000, 4500, -4500, 2000, -2000, -4500, 4500, -2500, -4500, 9000, 0, 4500);
      delay(20);
      if (BIT_batu)
      {
        while (BIT_batu)
        {
         Set_Pos_All(0, 4500, 9000, -9000, 4000, -4500, -9000, 9000, -4000, -3000, -1000, 3000, 1000);
         delay(10);
         // ReadVS2();
        }
        Set_Pos_All(0, 2000, 9000, -9000, 4000, -2000, -9000, 9000, -4000, 0, -1000, 0, 1000);
        delay(30);
        Set_Pos_All(0, 2000, 7000, -5000, 2000, -2000, -7000, 5000, -2000, 0, -4000, 0, 4000);
        delay(100);
      }

    }
  Set_Pos_All(0, 2000, 4500, -4500, 2000, -2000, -4500, 4500, -2500, 0, 0, 0, 4500);
  delay(30);
}


void Attack_Left()
{
  krs.setStrc(0, 65);
  Set_Pos_All(4500, 2000, 4500, -4500, 2000, -2000, -4500, 4500, -2500, 0, -4500, 4500, 4500);
  delay(10);
  krs.setStrc(11, 60);
  krs.setStrc(12, 70);
  while (BIT_sikaku)
    {

      Set_Pos_All(4500, 2000, 4500, -4500, 2000, -2000, -4500, 4500, -2500, 0, -4500, 4500, -9000);
      delay(20);

      //膝伸ばし
      // Set_Pos_All(4500, 1000, 0, 0, 2000, -2000, 0, 0, -2500, 0, -4500, 4500, -9000);
      // delay(20);
      
     if (BIT_batu)
      {
        while (BIT_batu)
        {
         Set_Pos_All(0, 4500, 9000, -9000, 4000, -4500, -9000, 9000, -4000, -3000, -1000, 3000, 1000);
         delay(10);
         // ReadVS2();
        }
        Set_Pos_All(0, 2000, 9000, -9000, 4000, -2000, -9000, 9000, -4000, 0, -1000, 0, 1000);
        delay(30);
        Set_Pos_All(0, 2000, 7000, -5000, 2000, -2000, -7000, 5000, -2000, 0, -4000, 0, 4000);
        delay(100);
      }
    }
  Set_Pos_All(0, 2000, 4500, -4500, 2000, -2000, -4500, 4500, -2000, 0, -4500, 0, 0);
  delay(30);
}

void Attack_both()
{
  krs.setStrc(10, 60);
  krs.setStrc(12, 60);
  Set_Pos_All(0, 2000, 4000, -4000, 2000, -2000, -4000, 4000, -2000, -10000, -4500, 10000, 4500);
  delay(30);
  while (BIT_sankaku)
    {
      Set_Pos_All(0, 2000, 3000, -3000, 2000, -2000, -3000, 3000, -2000, -10000, 0, 10000, 0);
      delay(20);
    }
  Set_Pos_All(0, 2000, 4000, -4000, 2000, -2000, -4000, 4000, -2000, 0, 0, 0, 0);
  delay(100);
}

void Hook_Right()
{
  krs.setStrc(0, 65);
  Set_Pos_All(-6000, 2000, 2000, -4500, 2500, -1000, 0, 2000, -2000, -4500, -4500, 0, 4500);
  delay(10);
  krs.setStrc(1, 60);
  krs.setStrc(5, 60);
  krs.setStrc(9, 60);
  krs.setStrc(10, 70);
  while (BIT_maru)
    {
      //対低重心試作
      // Set_Pos_All(-4500, 4500, 4500, -4500, 2500, -1200, -4500, 4500, -2000, -4500, 9000, 0, 4500);
      // delay(20);
      
      //高い打点
      Set_Pos_All(-6000, 2000, 4500, -4500, 2000, -2000, -4500, 4500, -2500, -4500, 9000, 0, 4500);
      delay(20);
      if (BIT_batu)
      {
        while (BIT_batu)
        {
         Set_Pos_All(0, 4500, 9000, -9000, 4000, -4500, -9000, 9000, -4000, -3000, -1000, 3000, 1000);
         delay(10);
         // ReadVS2();
        }
        Set_Pos_All(0, 2000, 9000, -9000, 4000, -2000, -9000, 9000, -4000, 0, -1000, 0, 1000);
        delay(30);
        Set_Pos_All(0, 2000, 7000, -5000, 2000, -2000, -7000, 5000, -2000, 0, -4000, 0, 4000);
        delay(100);
      }

    }
  Set_Pos_All(0, 2000, 4500, -4500, 2000, -2000, -4500, 4500, -2500, 0, 0, 0, 4500);
  delay(30);
}

void Hook_Left()
{
  krs.setStrc(0, 65);
  Set_Pos_All(6000, 2000, 4500, -4500, 2000, -2000, -4500, 4500, -2500, 0, -4500, 4500, 4500);
  delay(10);
  krs.setStrc(11, 60);
  krs.setStrc(12, 70);
  while (BIT_sikaku)
    {

      Set_Pos_All(6000, 2000, 4500, -4500, 2000, -2000, -4500, 4500, -2500, 0, -4500, 4500, -9000);
      delay(20);

      //膝伸ばし
      // Set_Pos_All(4500, 1000, 0, 0, 2000, -2000, 0, 0, -2500, 0, -4500, 4500, -9000);
      // delay(20);
      
     if (BIT_batu)
      {
        while (BIT_batu)
        {
         Set_Pos_All(0, 4500, 9000, -9000, 4000, -4500, -9000, 9000, -4000, -3000, -1000, 3000, 1000);
         delay(10);
         // ReadVS2();
        }
        Set_Pos_All(0, 2000, 9000, -9000, 4000, -2000, -9000, 9000, -4000, 0, -1000, 0, 1000);
        delay(30);
        Set_Pos_All(0, 2000, 7000, -5000, 2000, -2000, -7000, 5000, -2000, 0, -4000, 0, 4000);
        delay(100);
      }
    }
  Set_Pos_All(0, 2000, 4500, -4500, 2000, -2000, -4500, 4500, -2000, 0, -4500, 0, 0);
  delay(30);
}



void Walk_5m()
{
  krs.setStrc(2, 60);
  krs.setStrc(3, 60);
  krs.setStrc(4, 60);
  krs.setStrc(6, 60);
  krs.setStrc(7, 60);
  krs.setStrc(8, 60);

  Set_Pos_All(0, 800, 4000, -4000, 200, -800, -4000, 4000, -200, -5000, -4000, 5000, 4000);
  delay(50);
  Set_Pos_All(0, 800, 4000, -4000, 200, -800, -6000, 6000, -500, -5000, -4000, 5000, 4000);
  delay(30);
  Set_Pos_All(0, 800, 4000, -4000, 200, -800, -3700, 2700, -500, -5000, -4000, 5000, 4000);
  delay(30);
  Set_Pos_All(0, 800, 6000, -6000, 200, -800, -4000, 4000, -500, -5000, -4000, 5000, 4000);
  delay(30);
  Set_Pos_All(0, 800, 3700, -2700, 200, -800, -4000, 4000, -500, -5000, -4000, 5000, 4000);
  delay(30);
 

  // while (BIT_sankaku)
  // {
  //   Set_Pos_All(0, 500, 3700, -2700, 500, -300, -4000, 4000, -300, 0, -4000, 0, 4000);
  //   delay(10);
  //   if (BIT_up)
  //     break;
  // }

  while (BIT_up)
  {
    Set_Pos_All(0, 800, 2600, -2600, 250, -800, -7200, 5200, -250, -5000, -4000, 5000, 4000);
    delay(10);
    Set_Pos_All(0, 800, 2600, -2600, 250, -800, -5700, 1200, -250, -5000, -4000, 5000, 4000);
    delay(20);
    Set_Pos_All(0, 800, 6600, -4600, 250, -800, -3200, 3200, -250, -5000, -4000, 5000, 4000);
    delay(10);
    Set_Pos_All(0, 800, 5100, -600, 250, -800, -3200, 3200, -250, -5000, -4000, 5000, 4000);
    delay(20); 

    //直進 v2

   /*
   //足重なる
     Set_Pos_All(0, 800, 2250, -2250, 200, -800, -7500, 4400, -500, -5000, -4000, 5000, 4000);
    delay(15);
    Set_Pos_All(0, 800, 2250, -2250, 200, -800, -4400, 400, -500, -5000, -4000, 5000, 4000);
    delay(25);
    Set_Pos_All(0, 800, 7800, -4250, 200, -800, -2600, 2600, -500, -5000, -4000, 5000, 4000);
    delay(15);
    Set_Pos_All(0, 800, 4250, -250, 200, -800, -2600, 2600, -500, -5000, -4000, 5000, 4000);
    delay(25);*/
    
    /*
   //左右対称
    Set_Pos_All(0, 500, 3000, -3000, 200, -300, -7000, 5000, -200, -5000, -4000, 5000, 4000);
    delay(10);
    Set_Pos_All(0, 500, 3000, -3000, 200, -300, -5500, 1000, -200, -5000, -4000, 5000, 4000);
    delay(20);
    Set_Pos_All(0, 500, 7000, -5000, 200, -300, -3000, 3000, -200, -5000, -4000, 5000, 4000);
    delay(10);
    Set_Pos_All(0, 500, 5500, -1000, 200, -300, -3000, 3000, -200, -5000, -4000, 5000, 4000);
    delay(20);
    */

    /*
     //直進 v1
    Set_Pos_All(0, 500, 2600, -2600, 250, -500, -7100, 5100, -250, 0, -4000, 0, 4000);
    delay(20);
    Set_Pos_All(0, 500, 2600, -2600, 250, -500, -6000, 1100, -250, 0, -4000, 0, 4000);
    delay(30);
    Set_Pos_All(0, 500, 6600, -4600, 250, -500, -3100, 3100, -250, 0, -4000, 0, 4000);
    delay(20);
    Set_Pos_All(0, 500, 5100, -600, 250, -500, -3100, 3100, -250, 0, -4000, 0, 4000);
    delay(30);
    */


  if (BIT_up && (BIT_R1 || BIT_R2))
  {
    while (BIT_up && (BIT_R1 || BIT_R2))
    {
    /*
    //結構足幅up 左右補正あり 右方向 v2
    Set_Pos_All(0, 300, 2100, -2100, 300, -300, -8200, 4700, -300, 0, -4000, 0, 4000);
    delay(10);
    Set_Pos_All(0, 300, 2100, -2100, 300, -300, -4700, 700, -300, 0, -4000, 0, 4000);
    delay(20);
    Set_Pos_All(0, 300, 7600, -4100, 300, -300, -2700, 2700, -300, 0, -4000, 0, 4000);
    delay(10);
    Set_Pos_All(0, 300, 4100, -100, 300, -300, -2700, 2700, -300, 0, -4000, 0, 4000);
    delay(20);
    */
    
    //方向修正 3/8 v1
    Set_Pos_All(0, 800, 2600, -2600, 250, -800, -7200, 5200, -250, 0, -4000, 0, 4000);
    delay(10);
    Set_Pos_All(0, 800, 2600, -2600, 250, -800, -5700, 1200, -250, 0, -4000, 0, 4000);
    delay(20);
    Set_Pos_All(0, 800, 6600, -4600, 250, -800, -3200, 3200, -250, 0, -4000, 0, 4000);
    delay(10);
    Set_Pos_All(0, 800, 5100, -600, 250, -800, -3200, 3200, -250, 0, -4000, 0, 4000);
    delay(20);
    
    /*
    //方向修正 3/7
    Set_Pos_All(0, 250, 2700, -2700, 0, -250, -7000, 5000, 0, 0, -4000, 0, 4000);
    delay(15);
    Set_Pos_All(0, 250, 2700, -2700, 0, -250, -5500, 1000, 0, 0, -4000, 0, 4000);
    delay(30);
    Set_Pos_All(0, 250, 6700, -4700, 0, -250, -3000, 3000, 0, 0, -4000, 0, 4000);
    delay(15);
    Set_Pos_All(0, 250, 5200, -700, 0, -250, -3000, 3000, 0, 0, -4000, 0, 4000);
    delay(30);
    */
    }
  }
  // else if (BIT_sankaku && BIT_R2)
  // {
  //   while (BIT_sankaku && BIT_R2)
  //   {
  //   //その場で方向転換
  //   Set_Pos_All(0, 250, 3000, -3000, 0, 0, -7000, 5000, 0, 0, -4000, 0, 4000);
  //   delay(15);
  //   Set_Pos_All(0, 250, 3000, -3000, 0, 0, -5500, 1000, 0, 0, -4000, 0, 4000);
  //   delay(30);
  //   Set_Pos_All(0, 250, 7000, -5000, 0, 0, -3000, 3000, 0, 0, -4000, 0, 4000);
  //   delay(15);
  //   Set_Pos_All(0, 250, 5500, -1000, 0, 0, -3000, 3000, 0, 0, -4000, 0, 4000);
  //   delay(30);
  //   }
  // }

  else if (BIT_up && (BIT_L1 || BIT_L2))
  {
    while (BIT_up && (BIT_L1 || BIT_L2))
    {
      /*
    //結構足幅up 左右補正あり 左 v2
    Set_Pos_All(0, 300, 2200, -2200, 300, -300, -8000, 4500, -300, 0, -4000, 0, 4000);
    delay(10);
    Set_Pos_All(0, 300, 2200, -2200, 300, -300, -4500, 500, -300, 0, -4000, 0, 4000);
    delay(20);
    Set_Pos_All(0, 300, 7700, -4200, 300, -300, -2500, 2500, -300, 0, -4000, 0, 4000);
    delay(10);
    Set_Pos_All(0, 300, 4200, -200, 300, -300, -2500, 2500, -300, 0, -4000, 0, 4000);
    delay(20);
    */
    
    //方向修正 v1
    Set_Pos_All(0, 800, 3000, -3000, 0, -800, -6700, 4700, 0, 0, -4000, 0, 4000);
    delay(10);
    Set_Pos_All(0, 800, 3000, -3000, 0, -800, -5200, 700, 0, 0, -4000, 0, 4000);
    delay(20);
    Set_Pos_All(0, 800, 7000, -5000, 0, -800, -2700, 2700, 0, 0, -4000, 0, 4000);
    delay(10);
    Set_Pos_All(0, 800, 5500, -1000, 0, -800, -2700, 2700, 0, 0, -4000, 0, 4000);
    delay(20);
    
    }
  }
  // else if (BIT_sankaku && BIT_L2)
  // {
  //   while (BIT_sankaku && BIT_L2)
  //   {
  //   //その場で方向転換
  //   Set_Pos_All(0, 0, 3000, -3000, 0, -250, -7000, 5000, 0, 0, -4000, 0, 4000);
  //   delay(15);
  //   Set_Pos_All(0, 0, 3000, -3000, 0, -250, -5500, 1000, 0, 0, -4000, 0, 4000);
  //   delay(30);
  //   Set_Pos_All(0, 0, 7000, -5000, 0, -250, -3000, 3000, 0, 0, -4000, 0, 4000);
  //   delay(15);
  //   Set_Pos_All(0, 0, 5500, -1000, 0, -250, -3000, 3000, 0, 0, -4000, 0, 4000);
  //   delay(30);
  //   }
  // }

  /*//3/7
  krs.setStrc(2, 60);
  krs.setStrc(3, 60);
  krs.setStrc(4, 60);
  krs.setStrc(6, 60);
  krs.setStrc(7, 60);
  krs.setStrc(8, 60);

  Set_Pos_All(0, 500, 4000, -4000, 2000, -300, -4000, 4000, -2000, 0, -4000, 0, 4000);
  delay(200);
  Set_Pos_All(0, 500, 4000, -4000, 500, -300, -6000, 6000, -300, 0, -4000, 0, 4000);
  delay(40);
  Set_Pos_All(0, 500, 4000, -4000, 500, -300, -3700, 2700, -300, 0, -4000, 0, 4000);
  delay(80);
  Set_Pos_All(0, 500, 6000, -6000, 500, -300, -4000, 4000, -300, 0, -4000, 0, 4000);
  delay(40);
  Set_Pos_All(0, 500, 3700, -2700, 500, -300, -4000, 4000, -300, 0, -4000, 0, 4000);
  delay(80);
  while (BIT_sankaku)
  {
    Set_Pos_All(0, 500, 4000, -4000, 0, -500, -6000, 6000, 0, 0, -4000, 0, 4000);
    delay(20);
    Set_Pos_All(0, 500, 4000, -4000, 0, -500, -5600, 1900, 0, 0, -4000, 0, 4000);
    delay(40);
    Set_Pos_All(0, 500, 6000, -6000, 0, -500, -4000, 4000, 0, 0, -4000, 0, 4000);
    delay(20);
    Set_Pos_All(0, 500, 5600, -1900, 0, -500, -4000, 4000, 0, 0, -4000, 0, 4000);
    delay(40);

  if (BIT_sankaku && BIT_R1)
  {
    while (BIT_sankaku && BIT_R1)
    {
    //方向修正
    Set_Pos_All(0, 500, 3700, -3700, 0, -500, -6000, 6000, 0, 0, -4000, 0, 4000);
    delay(20);
    Set_Pos_All(0, 500, 3700, -3700, 0, -500, -5600, 1900, 0, 0, -4000, 0, 4000);
    delay(40);
    Set_Pos_All(0, 500, 5700, -5700, 0, -500, -4000, 4000, 0, 0, -4000, 0, 4000);
    delay(20);
    Set_Pos_All(0, 500, 5300, -1600, 0, -500, -4000, 4000, 0, 0, -4000, 0, 4000);
    delay(40);
    }
  }
  else if (BIT_sankaku && BIT_R2)
  {
    while (BIT_sankaku && BIT_R2)
    {
    //その場で方向転換
    Set_Pos_All(0, 500, 4000, -4000, 0, 0, -6000, 6000, 0, 0, -4000, 0, 4000);
    delay(20);
    Set_Pos_All(0, 500, 4000, -4000, 0, 0, -5600, 1900, 0, 0, -4000, 0, 4000);
    delay(40);
    Set_Pos_All(0, 500, 6000, -6000, 0, 0, -4000, 4000, 0, 0, -4000, 0, 4000);
    delay(20);
    Set_Pos_All(0, 500, 5600, -1900, 0, 0, -4000, 4000, 0, 0, -4000, 0, 4000);
    delay(40);    
    }
  }

  else if (BIT_sankaku && BIT_L1)
  {
    while (BIT_sankaku && BIT_L1)
    {
    //方向修正
    Set_Pos_All(0, 500, 4000, -4000, 0, -500, -5700, 5700, 0, 0, -4000, 0, 4000);
    delay(20);
    Set_Pos_All(0, 500, 4000, -4000, 0, -500, -5300, 1600, 0, 0, -4000, 0, 4000);
    delay(40);
    Set_Pos_All(0, 500, 6000, -6000, 0, -500, -3700, 3700, 0, 0, -4000, 0, 4000);
    delay(20);
    Set_Pos_All(0, 500, 5600, -1900, 0, -500, -3700, 3700, 0, 0, -4000, 0, 4000);
    delay(40);  
    
    }
  }
  else if (BIT_sankaku && BIT_L2)
  {
    while (BIT_sankaku && BIT_L2)
    {
    //その場で方向転換
    Set_Pos_All(0, 200, 4000, -4000, 0, -500, -6000, 6000, 0, 0, -4000, 0, 4000);
    delay(20);
    Set_Pos_All(0, 200, 4000, -4000, 0, -500, -5600, 1900, 0, 0, -4000, 0, 4000);
    delay(40);
    Set_Pos_All(0, 200, 6000, -6000, 0, -500, -4000, 4000, 0, 0, -4000, 0, 4000);
    delay(20);
    Set_Pos_All(0, 200, 5600, -1900, 0, -500, -4000, 4000, 0, 0, -4000, 0, 4000);
    delay(40);
    }
  }
  */

  
  //test
  /*
  else if (BIT_up && BIT_up)
  {
    while (BIT_up && BIT_up)
    {
     //直進 v3
    Set_Pos_All(0, 300, 2050, -2050, 300, -300, -8100, 4600, -300, 0, -4000, 0, 4000);
    delay(10);
    Set_Pos_All(0, 300, 2050, -2050, 300, -300, -4600, 600, -300, 0, -4000, 0, 4000);
    delay(20);
    Set_Pos_All(0, 300, 7750, -4250, 300, -300, -2600, 2400, -100, 0, -4000, 0, 4000);
    delay(10);
    Set_Pos_All(0, 300, 4250, -250, 300, -300, -2600, 2400, -100, 0, -4000, 0, 4000);
    delay(20);
    
    //結構足幅up 左右補正あり 直進のつもり
    Set_Pos_All(0, 300, 2250, -2250, 300, -300, -8100, 4600, -300, 0, -4000, 0, 4000);
    delay(10);
    Set_Pos_All(0, 300, 2250, -2250, 300, -300, -4600, 600, -300, 0, -4000, 0, 4000);
    delay(20);
    Set_Pos_All(0, 300, 7750, -4250, 300, -300, -2600, 2600, -300, 0, -4000, 0, 4000);
    delay(10);
    Set_Pos_All(0, 300, 4250, -250, 300, -300, -2600, 2600, -300, 0, -4000, 0, 4000);
    delay(20);
    
    //結構足幅up 左右補正なし
    Set_Pos_All(0, 300, 2500, -2500, 300, -300, -8000, 4500, -300, 0, -4000, 0, 4000);
    delay(10);
    Set_Pos_All(0, 300, 2500, -2500, 300, -300, -4500, 500, -300, 0, -4000, 0, 4000);
    delay(20);
    Set_Pos_All(0, 300, 8000, -4500, 300, -300, -2500, 2500, -300, 0, -4000, 0, 4000);
    delay(10);
    Set_Pos_All(0, 300, 4500, -500, 300, -300, -2500, 2500, -300, 0, -4000, 0, 4000);
    delay(20);
    }
  }
  */

  else if (BIT_up && BIT_right)
  {
    while (BIT_up && BIT_right)
    {
    //結構足幅up 左右補正あり 右方向 v3
    Set_Pos_All(0, 300, 1900, -1900, 300, -300, -8200, 4700, -300, 0, -4000, 0, 4000);
    delay(10);
    Set_Pos_All(0, 300, 1900, -1900, 300, -300, -4700, 700, -300, 0, -4000, 0, 4000);
    delay(20);
    Set_Pos_All(0, 300, 7600, -4100, 300, -300, -2500, 2500, -300, 0, -4000, 0, 4000);
    delay(10);
    Set_Pos_All(0, 300, 4100, -100, 300, -300, -2500, 2500, -300, 0, -4000, 0, 4000);
    delay(20);
    /*
    //結構足幅up 左右補正あり 右方向
    Set_Pos_All(0, 300, 2100, -2100, 300, -300, -8200, 4700, -300, 0, -4000, 0, 4000);
    delay(10);
    Set_Pos_All(0, 300, 2100, -2100, 300, -300, -4700, 700, -300, 0, -4000, 0, 4000);
    delay(20);
    Set_Pos_All(0, 300, 7600, -4100, 300, -300, -2700, 2700, -300, 0, -4000, 0, 4000);
    delay(10);
    Set_Pos_All(0, 300, 4100, -100, 300, -300, -2700, 2700, -300, 0, -4000, 0, 4000);
    delay(20);
    */
    }
  }
  
  else if (BIT_up && BIT_left)
  {
    while (BIT_up && BIT_left)
    {

     //結構足l幅<<<<,,,,,,,mmmmup 左右補正あり 左 v3
    Set_Pos_All(0, 300, 2000, -2000, 300, -300, -8000, 4500, -300, 0, -4000, 0, 4000);
    delay(10);
    Set_Pos_All(0, 300, 2000, -2000, 300, -300, -4500, 500, -300, 0, -4000, 0, 4000);
    delay(20);
    Set_Pos_All(0, 300, 7700, -4200, 300, -300, -2300, 2300, -300, 0, -4000, 0, 4000);
    delay(10);
    Set_Pos_All(0, 300, 4200, -200, 300, -300, -2300, 2300, -300, 0, -4000, 0, 4000);
    delay(20);
    // //結構足幅up 左右補正あり 左
    // Set_Pos_All(0, 300, 2200, -2200, 300, -300, -8000, 4500, -300, 0, -4000, 0, 4000);
    // delay(10);
    // Set_Pos_All(0, 300, 2200, -2200, 300, -300, -4500, 500, -300, 0, -4000, 0, 4000);
    // delay(20);
    // Set_Pos_All(0, 300, 7700, -4200, 300, -300, -2500, 2500, -300, 0, -4000, 0, 4000);
    // delay(10);
    // Set_Pos_All(0, 300, 4200, -200, 300, -300, -2500, 2500, -300, 0, -4000, 0, 4000);
    // delay(20);
    // //結構足幅up 左右補正あり
    // Set_Pos_All(0, 300, 1600, -1600, 300, -300, -8100, 5100, -300, 0, -4000, 0, 4000);
    // delay(50);
    // Set_Pos_All(0, 300, 1600, -1600, 300, -300, -5600, 600, -300, 0, -4000, 0, 4000);
    // delay(100);
    // Set_Pos_All(0, 300, 7600, -4600, 300, -300, -2100, 2100, -300, 0, -4000, 0, 4000);
    // delay(50);
    // Set_Pos_All(0, 300, 5100, -100, 300, -300, -2100, 2100, -300, 0, -4000, 0, 4000);
    // delay(100);
    }

    // //急な方向転換(L伸ばし)
    // Set_Pos_All(0, 250, 2400, -2400, 250, -250, -7200, 5200, -250, 0, -4000, 0, 4000);
    // delay(15);
    // Set_Pos_All(0, 250, 2400, -2400, 250, -250, -5700, 1200, -250, 0, -4000, 0, 4000);
    // delay(30);
    // Set_Pos_All(0, 250, 6400, -4400, 250, -250, -3200, 3200, -250, 0, -4000, 0, 4000);
    // delay(15);
    // Set_Pos_All(0, 250, 4900, -400, 250, -250, -3200, 3200, -250, 0, -4000, 0, 4000);
    // delay(30);
    
    //  //R伸ばし
    // Set_Pos_All(0, 600, 2500, -2500, 600, -250, -7200, 5200, -200, 0, -4000, 0, 4000);
    // delay(15);
    // Set_Pos_All(0, 600, 2500, -2500, 600, -250, -5700, 1200, -200, 0, -4000, 0, 4000);
    // delay(30);
    // Set_Pos_All(0, 600, 6500, -4500, 600, -250, -3200, 3200, -200, 0, -4000, 0, 4000);
    // delay(15);
    // Set_Pos_All(0, 600, 5000, -500, 600, -250, -3200, 3200, -200, 0, -4000, 0, 4000);
    // delay(30);

    

    // //test3
    // Set_Pos_All(0, 500, 3000, -3000, 200, -500, -7000, 5000, -200, 0, -4000, 0, 4000);
    // delay(20);
    // Set_Pos_All(0, 500, 3000, -3000, 200, -500, -5500, 1000, -200, 0, -4000, 0, 4000);
    // delay(40);
    // Set_Pos_All(0, 500, 7000, -5000, 200, -500, -3000, 3000, -200, 0, -4000, 0, 4000);
    // delay(20);
    // Set_Pos_All(0, 500, 5500, -1000, 200, -500, -3000, 3000, -200, 0, -4000, 0, 4000);
    // delay(40);
  }


 }
}
/*
// best
  krs.setStrc(2, 60);
  krs.setStrc(3, 60);
  krs.setStrc(4, 60);
  krs.setStrc(6, 60);
  krs.setStrc(7, 60);
  krs.setStrc(8, 60);
  
  Set_Pos_All(0, 500, 4000, -4000, 2000, -300, -4000, 4000, -2000, 0, -4000, 0, 4000);
  delay(200);
  Set_Pos_All(0, 500, 4000, -4000, 500, -300, -6000, 6000, -300, 0, -4000, 0, 4000);
  delay(40);
  Set_Pos_All(0, 500, 4000, -4000, 500, -300, -3700, 2700, -300, 0, -4000, 0, 4000);
  delay(80);
  Set_Pos_All(0, 500, 6000, -6000, 500, -300, -4000, 4000, -300, 0, -4000, 0, 4000);
  delay(40);
  Set_Pos_All(0, 500, 3700, -2700, 500, -300, -4000, 4000, -300, 0, -4000, 0, 4000);
  delay(80);
  while (BIT_sankaku)
  {
    Set_Pos_All(0, 500, 4000, -4000, 0, -500, -6000, 6000, 0, 0, -4000, 0, 4000);
    delay(20);
    Set_Pos_All(0, 500, 4000, -4000, 0, -500, -5600, 1900, 0, 0, -4000, 0, 4000);
    delay(40);
    Set_Pos_All(0, 500, 6000, -6000, 0, -500, -4000, 4000, 0, 0, -4000, 0, 4000);
    delay(20);
    Set_Pos_All(0, 500, 5600, -1900, 0, -500, -4000, 4000, 0, 0, -4000, 0, 4000);
    delay(40);
  }
*/  

/*3/1 やや歩幅up
  krs.setStrc(2, 60);
  krs.setStrc(3, 60);
  krs.setStrc(4, 60);
  krs.setStrc(6, 60);
  krs.setStrc(7, 60);
  krs.setStrc(8, 60);
  
  Set_Pos_All(0, 500, 4000, -4000, 2000, -300, -4000, 4000, -2000, 0, -4000, 0, 4000);
  delay(200);
  Set_Pos_All(0, 500, 4000, -4000, 500, -300, -6000, 6000, -300, 0, -4000, 0, 4000);
  delay(40);
  Set_Pos_All(0, 500, 4000, -4000, 500, -300, -3700, 2700, -300, 0, -4000, 0, 4000);
  delay(80);
  Set_Pos_All(0, 500, 6000, -6000, 500, -300, -4000, 4000, -300, 0, -4000, 0, 4000);
  delay(40);
  Set_Pos_All(0, 500, 3700, -2700, 500, -300, -4000, 4000, -300, 0, -4000, 0, 4000);
  delay(80);
  while (BIT_sankaku)
  {
    Set_Pos_All(0, 500, 4000, -4000, 0, -500, -7000, 5000, 0, 0, -4000, 0, 4000);
    delay(10);
    Set_Pos_All(0, 500, 4000, -4000, 0, -500, -5600, 1900, 0, 0, -4000, 0, 4000);
    delay(20);
    Set_Pos_All(0, 500, 7000, -5000, 0, -500, -4000, 4000, 0, 0, -4000, 0, 4000);
    delay(10);
    Set_Pos_All(0, 500, 5600, -1900, 0, -500, -4000, 4000, 0, 0, -4000, 0, 4000);
    delay(20);
  }
  */
 
 /*
  //3/2 歩幅up v4
  krs.setStrc(2, 60);
  krs.setStrc(3, 60);
  krs.setStrc(4, 60);
  krs.setStrc(6, 60);
  krs.setStrc(7, 60);
  krs.setStrc(8, 60);
  
  Set_Pos_All(0, 500, 4000, -4000, 2000, -300, -4000, 4000, -2000, 0, -4000, 0, 4000);
  delay(200);
  Set_Pos_All(0, 500, 4000, -4000, 500, -300, -6000, 6000, -300, 0, -4000, 0, 4000);
  delay(40);
  Set_Pos_All(0, 500, 4000, -4000, 500, -300, -3700, 2700, -300, 0, -4000, 0, 4000);
  delay(80);
  Set_Pos_All(0, 500, 6000, -6000, 500, -300, -4000, 4000, -300, 0, -4000, 0, 4000);
  delay(40);
  Set_Pos_All(0, 500, 3700, -2700, 500, -300, -4000, 4000, -300, 0, -4000, 0, 4000);
  delay(80);

  Set_Pos_All(0, 500, 500, -6000, 0, -500, -6000, 1000, 0, 0, -4000, 0, 4000);//左足前
  delay(200);

  while (BIT_sankaku)
  {
    // for (int i = 0; i <= 10; i++)
    // {
    //   Set_Pos_All(0, 500 - i*150, 500, -8000 + i*200, 0 - i*100, -500 - i*150, -8000, 500, 0, 0, -4000, 0, 4000);//左足に重心移動
    //   delay(5);
    //   //(0, -1000, 500, -6000, -1000, -2000, -8000, 500, 0, 0, -4000, 0, 4000)
    // }
    for (int i = 0; i <= 10; i++)
    {
      Set_Pos_All(0, 500 + i*50, 500 + i*450, -6000, 0, -500, -6000, 1000, 0, 0, -4000, 0, 4000);//右足を上げる
      //delay(1);
      //(0, 1000, 5000, -6000, 0, -500, -6000, 1000, 0, 0, -4000, 0, 4000)
    }
    for (int i = 0; i <= 10; i++)
    {
      Set_Pos_All(0, 1000 - i*50, 5000 + i*100, -6000 + i*600, 0, -500, -6000 + i*550, 1000 + i*500, 0, 0, -4000, 0, 4000);
      //delay(1);
    }
    //Set_Pos_All(0, 500, 6000, -1000, 0, -500, -500, 6000, 0, 0, -4000, 0, 4000);


    // for (int i = 0; i <= 10; i++)
    // {
    //   Set_Pos_All(0, 500 + i*150, 8000, -500, 0, -500 + i*150, -500, 8000 - i*200, 0 + i*100, 0, -4000, 0, 4000);//右足に重心移動
    //   delay(5);
    //   //(0, 2000, 8000, -500, 0, 1000, -500, 6000, 1000, 0, -4000, 0, 4000)
    // }
    for (int i = 0; i <= 10; i++)
    {
      Set_Pos_All(0, 500, 6000, -1000, 0, -500 - i*50, -500 - i*450, 6000, 0, 0, -4000, 0, 4000);//左足を上げる
      //delay(1);
      //(0, 500, 6000, -1000, 0, -1000, -5000, 6000, 0, 0, -4000, 0, 4000)     
    }
    for (int i = 0; i <= 10; i++)
    {
      Set_Pos_All(0, 500, 6000 - i*550, -1000 - i*500, 0, -1000 + i*50, -5000 - i*100, 6000 - i*500, 0, 0, -4000, 0, 4000);
      //delay(1);
    }
    //(0, 500, 500, -6000, 0, -500, -6000, 1000, 0)
  }
  */

  /*
  //3/2 歩幅up v3
  krs.setStrc(2, 60);
  krs.setStrc(3, 60);
  krs.setStrc(4, 60);
  krs.setStrc(6, 60);
  krs.setStrc(7, 60);
  krs.setStrc(8, 60);
  
  Set_Pos_All(0, 500, 4000, -4000, 2000, -300, -4000, 4000, -2000, 0, -4000, 0, 4000);
  delay(200);
  Set_Pos_All(0, 500, 4000, -4000, 500, -300, -6000, 6000, -300, 0, -4000, 0, 4000);
  delay(40);
  Set_Pos_All(0, 500, 4000, -4000, 500, -300, -3700, 2700, -300, 0, -4000, 0, 4000);
  delay(80);
  Set_Pos_All(0, 500, 6000, -6000, 500, -300, -4000, 4000, -300, 0, -4000, 0, 4000);
  delay(40);
  Set_Pos_All(0, 500, 3700, -2700, 500, -300, -4000, 4000, -300, 0, -4000, 0, 4000);
  delay(80);

  Set_Pos_All(0, 500, 500, -8000, 0, -500, -8000, 500, 0, 0, -4000, 0, 4000);//左足前
  delay(200);
  while (BIT_sankaku)
  {
    // for (int i = 0; i <= 10; i++)
    // {
    //   Set_Pos_All(0, 500 - i*150, 500, -8000 + i*200, 0 - i*100, -500 - i*150, -8000, 500, 0, 0, -4000, 0, 4000);//左足に重心移動
    //   delay(5);
    //   //(0, -1000, 500, -6000, -1000, -2000, -8000, 500, 0, 0, -4000, 0, 4000)
    // }
    for (int i = 0; i <= 10; i++)
    {
      Set_Pos_All(0, 500, 500 + i*550, -8000, 0, -500, -8000, 500, 0, 0, -4000, 0, 4000);//右足を上げる
      delay(1);
      //(0, 500, 6000, -8000, 0, -500, -8000, 500, 0, 0, -4000, 0, 4000)
    }
    for (int i = 0; i <= 10; i++)
    {
      Set_Pos_All(0, 500, 6000 + i*200, -8000 + i*750, 0, -500, -8000 + i*750, 500 + i*750, 0, 0, -4000, 0, 4000);
      delay(1);
    }
    //Set_Pos_All(0, 500, 8000, -500, 0, -500, -500, 8000, 0, 0, -4000, 0, 4000);


    // for (int i = 0; i <= 10; i++)
    // {
    //   Set_Pos_All(0, 500 + i*150, 8000, -500, 0, -500 + i*150, -500, 8000 - i*200, 0 + i*100, 0, -4000, 0, 4000);//右足に重心移動
    //   delay(5);
    //   //(0, 2000, 8000, -500, 0, 1000, -500, 6000, 1000, 0, -4000, 0, 4000)
    // }
    for (int i = 0; i <= 10; i++)
    {
      Set_Pos_All(0, 500, 8000, -500, 0, -500, -500 - i*550, 8000, 0, 0, -4000, 0, 4000);//左足を上げる
      delay(1);
      //(0, 500, 8000, -500, 0, -500, -6000, 8000, 0, 0, -4000, 0, 4000)
    }
    for (int i = 0; i <= 10; i++)
    {
      Set_Pos_All(0, 500, 8000 - i*750, -500 - i*750, 0, -500, -6000 - i*200, 6000 - i*550, 0, 0, -4000, 0, 4000);
      delay(1);
    }
    //(0, 500, 500, -8000, 0, -500, -8000, 500, 0)
  }
  */
  
  /*
   //3/2 歩幅up v2
  krs.setStrc(2, 60);
  krs.setStrc(3, 60);
  krs.setStrc(4, 60);
  krs.setStrc(6, 60);
  krs.setStrc(7, 60);
  krs.setStrc(8, 60);
  
  Set_Pos_All(0, 500, 4000, -4000, 2000, -300, -4000, 4000, -2000, 0, -4000, 0, 4000);
  delay(200);
  Set_Pos_All(0, 500, 4000, -4000, 500, -300, -6000, 6000, -300, 0, -4000, 0, 4000);
  delay(40);
  Set_Pos_All(0, 500, 4000, -4000, 500, -300, -3700, 2700, -300, 0, -4000, 0, 4000);
  delay(80);
  Set_Pos_All(0, 500, 6000, -6000, 500, -300, -4000, 4000, -300, 0, -4000, 0, 4000);
  delay(40);
  Set_Pos_All(0, 500, 3700, -2700, 500, -300, -4000, 4000, -300, 0, -4000, 0, 4000);
  delay(80);

  Set_Pos_All(0, 500, 500, -8000, 0, -500, -8000, 500, 0, 0, -4000, 0, 4000);//左足前
  delay(200);
  while (BIT_sankaku)
  {
    for (int i = 0; i <= 10; i++)
    {
      Set_Pos_All(0, 500 - i*150, 500, -8000 + i*200, 0 - i*100, -500 - i*150, -8000, 500, 0, 0, -4000, 0, 4000);//左足に重心移動
      delay(5);
      //(0, -1000, 500, -6000, -1000, -2000, -8000, 500, 0, 0, -4000, 0, 4000)
    }
    for (int i = 0; i <= 10; i++)
    {
      Set_Pos_All(0, -1000, 500 + i*400, -6000, -1000, -2000, -8000, 500, 0, 0, -4000, 0, 4000);//右足を上げる
      delay(5);
      //(0, -1000, 4500, -6000, -1000, -2000, -8000, 500, 0, 0, -4000, 0, 4000)
    }
    for (int i = 0; i <= 10; i++)
    {
      Set_Pos_All(0, -1000 + i*150, 4500 + i*350, -6000 + i*550, -1000 + i*100, -2000 + i*150, -8000 + i*750, 500 + i*750, 0, 0, -4000, 0, 4000);
      delay(5);
    }
    //Set_Pos_All(0, 500, 8000, -500, 0, -500, -500, 8000, 0, 0, -4000, 0, 4000);


    for (int i = 0; i <= 10; i++)
    {
      Set_Pos_All(0, 500 + i*150, 8000, -500, 0, -500 + i*150, -500, 8000 - i*200, 0 + i*100, 0, -4000, 0, 4000);//右足に重心移動
      delay(5);
      //(0, 2000, 8000, -500, 0, 1000, -500, 6000, 1000, 0, -4000, 0, 4000)
    }
    for (int i = 0; i <= 10; i++)
    {
      Set_Pos_All(0, 2000, 8000, -500, 0, 1000, -500 - i*400, 6000, 1000, 0, -4000, 0, 4000);//左足を上げる
      delay(5);
      //(0, 2000, 8000, -500, 0, 1000, -4500, 6000, 1000, 0, -4000, 0, 4000)
    }
    for (int i = 0; i <= 10; i++)
    {
      Set_Pos_All(0, 2000 - i*150, 8000 - i*750, -500 - i*750, 0, 1000 - i*150, -4500 - i*350, 6000 - i*550, 1000 - i*100, 0, -4000, 0, 4000);
      delay(5);
    }
    //(0, 500, 500, -8000, 0, -500, -8000, 500, 0)
  }
  */

  /*
  //3/2 歩幅up v1
  krs.setStrc(2, 60);
  krs.setStrc(3, 60);
  krs.setStrc(4, 60);
  krs.setStrc(6, 60);
  krs.setStrc(7, 60);
  krs.setStrc(8, 60);
  
  Set_Pos_All(0, 500, 4000, -4000, 2000, -300, -4000, 4000, -2000, 0, -4000, 0, 4000);
  delay(200);
  Set_Pos_All(0, 500, 4000, -4000, 500, -300, -6000, 6000, -300, 0, -4000, 0, 4000);
  delay(40);
  Set_Pos_All(0, 500, 4000, -4000, 500, -300, -3700, 2700, -300, 0, -4000, 0, 4000);
  delay(80);
  Set_Pos_All(0, 500, 6000, -6000, 500, -300, -4000, 4000, -300, 0, -4000, 0, 4000);
  delay(40);
  Set_Pos_All(0, 500, 3700, -2700, 500, -300, -4000, 4000, -300, 0, -4000, 0, 4000);
  delay(80);

  Set_Pos_All(0, 500, 500, -8000, 0, -500, -8000, 500, 0, 0, -4000, 0, 4000);//左足前
  delay(200);
  while (BIT_sankaku)
  {
    Set_Pos_All(0, -1000, 500, -6000, -1000, -2000, -8000, -1000, 0, 0, -4000, 0, 4000);//左足に重心移動
    delay(50);
    for (int i = 0; i <= 10; i++)
    {
      Set_Pos_All(0, -1000 + i*150, 500 + i*750, -6000 + i*550, -1000 + i*100, -2000 + i*150, -8000 + i*750, -1000 + i*900, 0, 0, -4000, 0, 4000);
      delay(10);
    }
    //Set_Pos_All(0, 500, 8000, -500, 0, -500, -500, 8000, 0, 0, -4000, 0, 4000);

    Set_Pos_All(0, 2000, 8000, 1000, 0, 1000, -500, 6000, 1000, 0, -4000, 0, 4000);//右足に重心移動
    delay(50);
    for (int i = 0; i <= 10; i++)
    {
      Set_Pos_All(0, 2000 - i*150, 8000 - i*750, 1000 - i*900, 0, 1000 - i*150, -500 - i*750, 6000 - i*550, 1000 - i*100, 0, -4000, 0, 4000);
      delay(10);
    }
    //(0, 500, 500, -8000, 0, -500, -8000, 500, 0    
  }
  */

/*
//3/1 速いけど曲がる
  krs.setStrc(2, 60);
  krs.setStrc(3, 60);
  krs.setStrc(4, 60);
  krs.setStrc(6, 60);
  krs.setStrc(7, 60);
  krs.setStrc(8, 60);
  
  Set_Pos_All(0, 500, 4000, -4000, 2000, -300, -4000, 4000, -2000, 0, -4000, 0, 4000);
  delay(200);
  Set_Pos_All(0, 500, 4000, -4000, 500, -300, -6000, 6000, -300, 0, -4000, 0, 4000);
  delay(40);
  Set_Pos_All(0, 500, 4000, -4000, 500, -300, -3700, 2700, -300, 0, -4000, 0, 4000);
  delay(80);
  Set_Pos_All(0, 500, 6000, -6000, 500, -300, -4000, 4000, -300, 0, -4000, 0, 4000);
  delay(40);
  Set_Pos_All(0, 500, 3700, -2700, 500, -300, -4000, 4000, -300, 0, -4000, 0, 4000);
  delay(80);
  while (BIT_sankaku)
  {
    Set_Pos_All(0, 500, 4000, -4000, 0, -500, -6000, 6000, 0, 0, -4000, 0, 4000);
    delay(10);
    Set_Pos_All(0, 500, 4000, -4000, 0, -500, -5600, 1900, 0, 0, -4000, 0, 4000);
    delay(20);
    Set_Pos_All(0, 500, 6000, -6000, 0, -500, -4000, 4000, 0, 0, -4000, 0, 4000);
    delay(10);
    Set_Pos_All(0, 500, 5600, -1900, 0, -500, -4000, 4000, 0, 0, -4000, 0, 4000);
    delay(20);
  }
*/

/*2/28
  krs.setStrc(2, 60);
  krs.setStrc(3, 60);
  krs.setStrc(4, 60);
  krs.setStrc(6, 60);
  krs.setStrc(7, 60);
  krs.setStrc(8, 60);
  
  Set_Pos_All(0, 500, 4000, -4000, 2000, -500, -4000, 4000, -2000, 0, -4000, 0, 4000);
  delay(200);
  Set_Pos_All(0, 500, 4000, -4000, 500, -500, -6000, 6000, -500, 0, -4000, 0, 4000);
  delay(40);
  Set_Pos_All(0, 500, 4000, -4000, 500, -500, -3700, 2700, -500, 0, -4000, 0, 4000);
  delay(80);
  Set_Pos_All(0, 500, 6000, -6000, 500, -500, -4000, 4000, -500, 0, -4000, 0, 4000);
  delay(40);
  Set_Pos_All(0, 500, 3700, -2700, 500, -500, -4000, 4000, -500, 0, -4000, 0, 4000);
  delay(80);
  while (BIT_sankaku)
  {
    Set_Pos_All(0, 500, 4000, -4000, 500, -500, -6000, 6000, -500, 0, -4000, 0, 4000);
    delay(20);
    Set_Pos_All(0, 500, 4000, -4000, 500, -500, -5600, 1900, -500, 0, -4000, 0, 4000);
    delay(40);
    Set_Pos_All(0, 500, 6000, -6000, 500, -500, -4000, 4000, -500, 0, -4000, 0, 4000);
    delay(20);
    Set_Pos_All(0, 500, 5600, -1900, 500, -500, -4000, 4000, -500, 0, -4000, 0, 4000);
    delay(40);
  }*/


void attack()
{
  krs.setStrc(0, 65);
  while (1)
  {
    delay(10);
    // ReadVS2();
    if (BIT_maru || BIT_sikaku || BIT_sankaku || !BIT_R2)
       break;
  }

  /*// right
  if (BIT_right)
  {
    Set_Pos_All(-4500, 2000, 2000, 0, 2500, -1000, 0, 2000, -2000, -4500, -4500, 0, 4500);
    delay(50);
    krs.setStrc(1, 60);
    krs.setStrc(5, 60);
    krs.setStrc(9, 60);
    krs.setStrc(10, 70);
    while (BIT_right)
    {
      Set_Pos_All(-4500, 2000, 0, 0, 2500, -1000, 0, 0, -2000, -4500, 9000, 0, 4500);
      delay(20);
    }
    Set_Pos_All(0, 2000, 4500, -4500, 2000, -2000, -4500, 4500, -2000, 0, 0, 0, 4500);
    delay(100);
  }
  */

  // low right
  if (BIT_maru)
  {
    krs.setStrc(9, 60);
    krs.setStrc(10, 60);
    while (BIT_maru)
    {
      Set_Pos_All(-9000, 2000, 2000, 0, 2500, -1000, 0, 2000, -2000, -9000, 9000, 0, 4500);
      delay(20);
    }
    Set_Pos_All(0, 3000, 4500, -4500, 3000, -3000, -4500, 4500, -3000, 0, 0, 0, 4500);
    delay(100);
  }

  /*
  // left
  else if (BIT_left)
  {
    krs.setStrc(11, 60);
    krs.setStrc(12, 60);
    Set_Pos_All(4500, 1000, 0, -2000, 2000, -2000, -2000, 0, -2500, 0, -4500, 4500, 4500);
    delay(100);
    while (BIT_left)
    {
      Set_Pos_All(4500, 1000, 0, -2000, 2000, -2000, -2000, 0, -2500, 0, -4500, 4500, -9000);
      delay(20);
    }
    Set_Pos_All(0, 2000, 4500, -4500, 2000, -2000, -4500, 4500, -2000, 0, -4500, 0, 0);
    delay(100);
  }
  */

  // low left
  else if (BIT_sikaku)
  {
    krs.setStrc(11, 60);
    krs.setStrc(12, 60);
    while (BIT_sikaku)
    {
      Set_Pos_All(9000, 1000, 0, -2000, 2000, -2000, -2000, 0, -2500, 0, -4500, 9000, -9000);
      delay(20);
    }
    Set_Pos_All(0, 2000, 4500, -4500, 2000, -2000, -4500, 4500, -2000, 0, -4500, 0, 0);
    delay(100);
  }

  // forward rotation kick
  // else if (BIT_up)
  // {
  //   krs.setStrc(2, 60);
  //   krs.setStrc(3, 60);
  //   krs.setStrc(6, 60);
  //   krs.setStrc(7, 60);
  //   krs.setStrc(11, 60);
  //   krs.setStrc(12, 60);
  //   Set_Pos_All(0, 1000, 9000, -9000, 1000, -1000, -9000, 9000, -1000, -9000, -3000, 9000, 3000);
  //   delay(200);
  //   for (int i = 0; i <= 20; i++)
  //   {
  //     Set_Pos_All(0, 1000 - 50 * i, 9000 - 500 * i, -9000, 1000 - 50 * i, -1000 + 50 * i, -9000 + 500 * i, 9000, -1000 + 50 * i, -9000, -3000 - 50 * i, 9000, 3000 + 50 * i);
  //     delay(20);
  //   }
  //   delay(20);
  //   Set_Pos_All(0, 0, 9000, -9000, 0, 0, -9000, 9000, 0, -9000, 12000, 9000, -12000);
  //   delay(100);
  //   // Set_Pos_All(0, 0, 9000, -9000, 0, 0, -9000, 9000, 0, -9000, 12000, 9000, -12000);
  //   // delay(140);
  //   Set_Pos_All(0, 0, 0, 0, 0, 0, 0, 0, 0, -9000, 12000, 9000, -12000);
  //   delay(50);
  //   Set_Pos_All(0, 0, 0, 0, 0, 0, 0, 0, 0, -9000, 0, 9000, 0);
  //   delay(500);
  // }

  // high kick right
  // else if (BIT_R1)
  // {
  //   krs.setStrc(1, 60);
  //   krs.setStrc(2, 60);
  //   krs.setStrc(3, 60);
  //   krs.setStrc(4, 60);
  //   krs.setStrc(5, 60);
  //   krs.setStrc(6, 60);
  //   krs.setStrc(7, 60);
  //   krs.setStrc(8, 60);
  //   delay(20);
  //   Set_Pos_All(0, 0, 0, 0, 0, -4000, -5500, 5500, 0, 0, -3000, 0, 3000);
  //   delay(100);
  //   Set_Pos_All(0, 0, 9000, -9000, 0, -4000, -5500, 5500, 0, 0, -3000, 0, 3000);
  //   delay(70);
  //   Set_Pos_All(0, 4000, 9000, -9000, 5000, -4000, -5000, 5000, -1000, -9000, 0, 0, -9000);
  //   delay(80);
  //   Set_Pos_All(0, 8000, 0, 0, 9000, -10000, 0, 0, -3000, 0, 0, 0, -9000);
  //   delay(300);
  //   while (BIT_R1)
  //   {
  //     Set_Pos_All(0, 4000, 9000, -9000, 5000, -4000, -9000, 9000, -5000, 0, 0, 0, 0);
  //     delay(70);
  //     // ReadVS2();
  //   }
  //   delay(100);
  //   Set_Pos_All(0, 2000, 9000, -9000, 4000, -2000, -9000, 9000, -4000, 0, -2000, 0, 2000);
  //   delay(500);
  // }

  // high kick left
  // else if (BIT_L1)
  // {
  //   krs.setStrc(1, 60);
  //   krs.setStrc(2, 60);
  //   krs.setStrc(3, 60);
  //   krs.setStrc(4, 60);
  //   krs.setStrc(5, 60);
  //   krs.setStrc(6, 60);
  //   krs.setStrc(7, 60);
  //   krs.setStrc(8, 60);
  //   delay(20);
  //   Set_Pos_All(0, 4000, 5500, -5500, 0, 0, 0, 0, 0, 0, -3000, 0, 3000);
  //   delay(100);
  //   Set_Pos_All(0, 4000, 5500, -5500, 0, 0, -9000, 9000, -5000, 0, -3000, 0, 3000);
  //   delay(70);
  //   Set_Pos_All(0, 4000, 5000, -5000, 1000, -4000, -9000, 9000, -5000, 0, 9000, 9000, 0);
  //   delay(80);
  //   Set_Pos_All(0, 9000, 0, 0, 3000, -8000, 0, 0, -9000, 0, 9000, 0, 0);
  //   delay(300);
  //   while (BIT_L1)
  //   {
  //     Set_Pos_All(0, 4000, 9000, -9000, 5000, -4000, -9000, 9000, -5000, 0, 0, 0, 0);
  //     delay(70);
  //     // ReadVS2();
  //   }
  //   delay(100);
  //   Set_Pos_All(0, 2000, 9000, -9000, 4000, -2000, -9000, 9000, -4000, 0, -2000, 0, 2000);
  //   delay(70);
  // }

  /*
  // both attack
  else if (BIT_down)
  {
    krs.setStrc(10, 60);
    krs.setStrc(12, 60);
    Set_Pos_All(0, 2000, 4000, -4000, 2000, -2000, -4000, 4000, -2000, -10000, -4500, 10000, 4500);
    delay(200);
    while (BIT_down)
    {
      Set_Pos_All(0, 2000, 3000, -3000, 2000, -2000, -3000, 3000, -2000, -10000, 0, 10000, 0);
    }
  }
  */

  // forward rotation kick
  else if (BIT_sankaku)
  {
    krs.setStrc(2, 60);
    krs.setStrc(3, 60);
    krs.setStrc(6, 60);
    krs.setStrc(7, 60);
    krs.setStrc(11, 60);
    krs.setStrc(12, 60);
    Set_Pos_All(0, 2000, 2000, -8000, 2000, -2000, -2000, 8000, -2000, -9000, -5000, 9000, 5000);
    delay(400);
    // for (int i = 0; i <= 20; i++)
    // {
    //   Set_Pos_All(0, 2000 - 50 * i, 9000 - 500 * i, -9000, 2000 - 50 * i, -1000 + 50 * i, -9000 + 500 * i, 9000, -1000 + 50 * i, -9000, -3000 - 50 * i, 9000, 3000 + 50 * i);
    //   delay(20);
    //   //(0, 1000, -1000, -9000, 1000, 1000, 1000, 9000, 0, 1000, -4000, 9000, 4000)
    // }
    // delay(20);
    Set_Pos_All(0, 0, 9000, -9000, 0, 0, -9000, 9000, 0, -9000, 12000, 9000, -12000);
    delay(300);
    // Set_Pos_All(0, 0, 9000, -9000, 0, 0, -9000, 9000, 0, -9000, 12000, 9000, -12000);
    // delay(140);
    Set_Pos_All(0, 0, 0, 0, 0, 0, 0, 0, 0, -9000, 12000, 9000, -12000);
    delay(50);
    Set_Pos_All(0, 0, 0, 0, 0, 0, 0, 0, 0, -9000, 0, 9000, 0);
    delay(1000);
    
  }
  
  krs.setStrc(9, 10);
  krs.setStrc(10, 90);
  krs.setStrc(11, 10);
  krs.setStrc(12, 90);
  Set_Pos_All(0, 2000, 4000, -4000, 2000, -2000, -4000, 4000, -2000, 0, -4900, 0, 4900);
  delay(20);
}  


/*段差昇降
// sankaku
void perform()
{
  krs.setStrc(0, 65);
  while (BIT_sankaku)
  {
    // ReadVS2();
    delay(20);
    if (BIT_right || BIT_left || BIT_up || BIT_down || BIT_R1 || BIT_L1 || BIT_L2 || BIT_R2 || BIT_sankaku)
      break;
  }
  // // walk forward slightly
  if (BIT_up)
  {
    while (1)
    {
      // 右乗せ
      // set_arm(0, -4000, 0, 4000);
      setPosInvLeg(0, 0, 0, 0, 27.3, 10, 29.1, 62.1);
      delay(50);
      //高さ同じ
      setPosInvLeg(0, 0, 0, 15, 27.3, 10, -5, 27.3);
      // set_arm(-9000, -4000, 0, 4000);
      delay(100);
      //左乗せ
      setPosInvLeg(0, 0, 10, 29.1, 62.1, 0, 0, 27.3);
      // set_arm(0, -4000, 0, 4000);
      delay(50);
      //高さ同じ
      setPosInvLeg(0, 0, 10, -5, 27.3, 0, 15, 27.3);
      // set_arm(0, -4000, 9000, 4000);
      delay(100);
      if (!BIT_up)
        break;
    }
  }

  // step up
  else if (BIT_left)
  {
    set_arm(-9000, -3000, 9000, 3000);
    delay(100);
    setPosInvLeg(1000, 1000, 11.9, 0, 34.1, 11.9, 0, 34.1);
    delay(100);
    setPosInvLeg(1000, 0, 11.9, 0, 0, 11.9, 0, 34.1);
    delay(70);
    setPosInvLeg(0, 2000, 11.9, 0, 85, 11.9, 50, 34.1);
    delay(100);
    // stand left leg
    setPosInvLeg(1000, 2400, 61.9, 0, 85, -8.1, 50, 34.1);
    delay(100);

    // 90 or 85
    setPosInvLeg(1000, 1000, 90, -10, 85, -20, 30, 20);
    // 1.0 × 2 ver
    // set_arm(0, -4000, 9000, 4000);
    delay(50);
    krs.setStrc(4, 60);
    // stand right leg
    setPosInvLeg(0, 1000, 90, -20, 45, -20, 20, 34.10);
    delay(100);
    for (int i = 0; i < 51; i++)
    {
      setPosInvLeg(1200 - 24 * i, 1000 - 20 * i, 90 - 1.5 * i, -22, 45, -20 - 1.2 * i, 20, 34.1);
      delayMicroseconds(10);
    }
    // setPosInvLeg(0, 0, 5, -20, 50, -80, 80, 70);
    // set_arm(-9000, 0, 0, 0);
    // delay(100);
    // setPosInvLeg(-600, 0, 5, -20, 50, -80, 90, 127);
    // 1.0 × 2 ver
    // setPosInvLeg(0, 0, 5, -22, 55, -80, 80, 70);
    // delay(100);
    // set_arm(-9000, 0, 0, 0);

    setPosInvLeg(-600, 0, 5, -22, 45, -80, 90, 137);
    delay(100);
    setPosInvLeg(-500, 0, 5, -22, 45, -20, 90, 137);
    delay(200);
    setPosInvLeg(1000, 0, 5, 30, 45, 0, 30, 50);
    delay(200);

    // 2.0 ver
    // これを安定させよう

    // while (BIT_left)
    // {
    //   // if (gyro_y > 2.0)
    //   // {
    //   //   setPosInvLeg(-500, 0, 5, -21, 45, -80, 90, 137);
    //   // }
    //   // else if (gyro_y > 3.0)
    //   // {
    //   //   setPosInvLeg(-500, 0, 5, -20, 45, -80, 90, 137);
    //   // }
    //   // else if (gyro_y > 4.0)
    //   // {
    //   //   setPosInvLeg(-500, 0, 5, -19, 45, -80, 90, 137);
    //   // }
    //   // else if (gyro_y > 5.0)
    //   // {
    //   //   setPosInvLeg(-500, 0, 5, -18, 45, -80, 90, 137);
    //   // }
    //   // else if (gyro_y < 0)
    //   // {
    //   //   setPosInvLeg(-500, 0, 5, -23, 45, -80, 90, 137);
    //   // }
    //   // else if (gyro_y < -1)
    //   // {
    //   //   setPosInvLeg(-500, 0, 5, -24, 45, -80, 90, 137);
    //   // }
    //   // else if (gyro_y < -2)
    //   // {
    //   //   setPosInvLeg(-500, 0, 5, -25, 45, -80, 90, 137);
    //   // }
    //   // else if (gyro_y < -3)
    //   // {
    //   //   setPosInvLeg(-500, 0, 5, -30, 45, -80, 90, 137);
    //   // }
    //   // else
    //   // {
    //   setPosInvLeg(-500, 0, 5, -22, 45, -20, 90, 137);
    //   // }
    // }
    // delay(100);

    // 右に乗り切ってない

    // while (BIT_left)
    // {
    //   setPosInvLeg(-600, 0, 5, -20, 50, -80, 30, 210);
    //   // 1.0 × 2 ver
    //   // setPosInvLeg(-1000, 0, 5, -22, 55, -80, 30, 210);
    // }
    // delay(10);
    // // 1.0 × 2 ver
    // setPosInvLeg(-800, 0, 5, -22, 50, 40, 90, 137);
    // // setPosInvLeg(0, 0, 5, 0, 55, 40, 40, 107);
    // delay(200);
  }

  // step down
  else if (BIT_right)
  {
    set_arm(-9000, -4000, 9000, 4000);
    delay(100);
    setPosInvLeg(-1000, -1000, 11.9, 0, 34.1, 11.9, 0, 34.1);
    delay(100);
    setPosInvLeg(0, -1000, 11.9, 0, 34.1, 11.9, 0, 0);
    delay(70);
    setPosInvLeg(-2000, 0, 11.9, 50, 34.1, 11.9, 0, 85);
    delay(100);

    // 右足立ち
    // setPosInvLeg(1000, 2400, -80, 0, 40, -8.1, 50, 34.1);
    setPosInvLeg(-2000, -1000, -8.1, 50, 34.1, -85, 0, 40);
    delay(200);
    //  左足首R調整で右側転倒防止
    set_arm(-9000, 0, 9000, 0);
    // setPosInvLeg(0, 2400, -80, 30, 40, 40, 50, 80);
    setPosInvLeg(0, -1000, 50, 50, 70, -85, 30, 40);
    delay(200);
    // setPosInvLeg(0, 1000, -80, 30, 40, 40, 50, 60);
    // setPosInvLeg(-1000, 0, 40, 50, 60, -85, 30, 40);
    // delay(100);
    // setPosInvLeg(-800, -2000, -80, 0, 30, 40, 60, 60);
    // setPosInvLeg(2000, 0, 40, 60, 60, -85, -30, 40);
    // delay(100);

    set_arm(0, 0, 0, 0);

    // 左足立ち
    // setPosInvLeg(-800, -2000, 5, -30, 70, 40, 120, 110);
    while(BIT_right)
    {
    setPosInvLeg(1000, -1200, 50, 50, 70, -40, 0, 40);
    }
    // delay(500);
    // while (BIT_right)
    // {
    //   setPosInvLeg(2000, -1200, 50, 50, 70, 0, -10, 40);
    // }
    // delay(50);
    setPosInvLeg(2000, -1200, 0, 60, 80, 0, -10, 40);
    delay(100);
    // setPosInvLeg(2000, -1000, -50, 60, 80, 0, -10, 40);
    // delay(500);
    // Set_Pos_All(0, 2000, 4000, -4000, 2000, -2000, -4000, 4000, -2000, 0, -4900, 0, 4900);
    // delay(100);
    // Set_Pos_All(1000, 2000, 3000, -3000, 2000, -2000, -3000, 3000, -2000, -3000, -4500, 3000, 4500);
    // delay(60);
    // Set_Pos_All(0, 2000, 4000, -4000, 2000, -2000, -4000, 4000, -2000, -3000, -4500, 3000, 4500);
    // delay(60);
    // setPosInvLeg(-500, -2000, 5, -20, 50, 40, 120, 110);
    // setPosInvLeg(2000, 2000, 40, 140, 170, 5, -20, 50);
    // delay(100);
    // // setPosInvLeg(-500, -2000, 5, -20, 50, -80, 120, 110);
    // setPosInvLeg(2000, 2000, -110, 140, 170, 20, 0, 50);
    // delay(500);
  }

  // walk backward slightly
  else if (BIT_down)
  {
    while (1)
    {
      // 右乗せ
      // set_arm(0, -4000, 0, 4000);
      setPosInvLeg(0, 0, 0, 0, 27.3, -20, 29.1, 62.1);
      delay(50);
      //高さ同じ
      setPosInvLeg(0, 0, 0, 15, 27.3, -20, -5, 27.3);
      // set_arm(-9000, -4000, 0, 4000);
      delay(100);
      //左乗せ
      setPosInvLeg(0, 0, -20, 29.1, 62.1, 0, 0, 27.3);
      // set_arm(0, -4000, 0, 4000);
      delay(50);
      //高さ同じ
      setPosInvLeg(0, 0, -20, -5, 27.3, 0, 15, 27.3);
      // set_arm(0, -4000, 9000, 4000);
      delay(100);
      if (!BIT_down)
        break;
    }
    // delay(10);
    //   set_arm(-9000, -4000, 9000, 4000);
    //   // int deg9 = -9000;
    //   // int pos9 = krs.degPos100(deg9);
    //   // krs.setPos(9, pos9);
    //   // int deg11 = 9000;
    //   // int pos11 = krs.degPos100(deg11);
    //   // krs.setPos(11, pos11);
    //   delay(100);
    //   setPosInvLeg(1000, 1000, 11.9, 0, 34.1, 11.9, 0, 34.1);
    //   delay(500);
    //   setPosInvLeg(1000, 0, 11.9, 0, 0, 11.9, 0, 34.1);
    //   delay(70);
    //   // setPosInvLeg(0, 2000, 11.9, 0, 80, 11.9, 50, 34.1);
    //   // delay(200);
    //   for (int i = 0; i < 11; i++)
    //   {
    //     setPosInvLeg(1000, 2000, 11.9 + 5 * i, 0, 85, 11.9 - 2 * i, 50, 34.1);
    //     delay(20);
    //   }
    //   setPosInvLeg(1000, 2000, 75, -10, 85, -20, 30, 34.1);
    //   delay(100);
    //   setPosInvLeg(1000, 1000, 80, -10, 70, -20, 30, 20);
    //   set_arm(-9000, 0, 9000, 4000);
    //   delay(100);
    //   krs.setStrc(4, 60);
    //   for (int i = 0; i < 51; i++)
    //   {
    //     // 80 or 85
    //     setPosInvLeg(1000, 1000, 85, -32, 70 - 0.4 * i, -20 - 0.8 * i, 20, 34.10);
    //     delay(10);
    //   }
    //   for (int i = 0; i < 51; i++)
    //   {
    //     // setPosInvLeg(1000, 1000, 80 - 1.5 * i, -30, 50, -70, 20, 34.1);
    //     setPosInvLeg(1000 - 20 * i, 1000, 80 - 1.5 * i, -35, 50, -70, 20, 34.1);
    //     int deg9 = -9000 + 180 * i;
    //     int pos9 = krs.degPos100(deg9);
    //     krs.setPos(9, pos9);
    //     delay(10);
    //   }
    //   setPosInvLeg(0, 1000, 5, -32, 50, -70, 20, 70);
    //   delay(200);
    //   krs.setStrc(5, 60);
    //   for (int i = 0; i < 51; i++)
    //   {
    //     int deg5 = -1600 - 100 * i;
    //     int pos5 = krs.degPos100(deg5);
    //     krs.setPos(5, pos5);
    //     // setPosInvLeg(0, 1000, 5, -30, 50 - 0.4 * i, -70, 20 + i, 70 + 0.6 * i);
    //     delay(20);
    //   }
    //   int deg6 = -9000;
    //   int pos6 = krs.degPos100(deg6);
    //   krs.setPos(6, pos6);

    //   int deg7 = 9000;
    //   int pos7 = krs.degPos100(deg7);
    //   krs.setPos(7, pos7);
    //   delay(100);

    //   while (BIT_right)
    //   {
    //     // setPosInvLeg(-1000, 1000, 5, -15, 50, -70, 20, 70);
    //     setPosInvLeg(0, 0, 5, 10, 50, 5, 10, 50);
    //     //   delay(10);
    //   }
    // }
  }

  // turn left slightly
  else if (BIT_L1)
  {
    krs.setStrc(0, 60);
    krs.setStrc(2, 60);
    krs.setStrc(3, 60);
    krs.setStrc(6, 60);
    krs.setStrc(7, 60);
    while (BIT_L1)
    {
      Set_Pos_All(-1200, 2000, 3000, -3000, 2000, -2000, -3000, 3000, -2000, -3000, -4500, 3000, 4500);
      delay(60);
      Set_Pos_All(0, 2000, 4000, -4000, 2000, -2000, -4000, 4000, -2000, -3000, -4500, 3000, 4500);
      delay(60);
    }
  }

  // turn right slightly
  else if (BIT_R1)
  {
    krs.setStrc(0, 60);
    krs.setStrc(2, 60);
    krs.setStrc(3, 60);
    krs.setStrc(6, 60);
    krs.setStrc(7, 60);
    while (BIT_R1)
    {
      Set_Pos_All(1000, 2000, 3000, -3000, 2000, -2000, -3000, 3000, -2000, -3000, -4500, 3000, 4500);
      delay(60);
      Set_Pos_All(0, 2000, 4000, -4000, 2000, -2000, -4000, 4000, -2000, -3000, -4500, 3000, 4500);
      delay(60);
    }
  }
}
*/

// R3
void return_neutral_pos()
{
  krs.setStrc(1, 60);
  krs.setStrc(4, 60);
  krs.setStrc(5, 60);
  krs.setStrc(8, 60);
  krs.setStrc(10, 60);
  krs.setStrc(12, 60);
  while (BIT_R3)
  {
    Set_Pos_All(0, 1000, 4000, -4000, 2000, -1000, -4000, 4000, -2000, 0, -4900, 0, 4900);
    // ReadVS2();
  }
  delay(10);
  krs.setStrc(0, 10);
  krs.setStrc(1, 10);
  krs.setStrc(2, 10);
  krs.setStrc(3, 10);
  krs.setStrc(4, 10);
  krs.setStrc(5, 10);
  krs.setStrc(6, 10);
  krs.setStrc(7, 10);
  krs.setStrc(8, 10);
  krs.setStrc(9, 10);
  krs.setStrc(10, 10);
  krs.setStrc(11, 10);
  krs.setStrc(12, 10);
}

// L3
void cover_arm()
{
  Set_Pos_All(0, 2000, 4000, -4000, 2000, -2000, -4000, 4000, -2000, -9000, -3000, 9000, 3000);
  delay(100);
  while (BIT_L3)
  {
    krs.setFree(10);
    krs.setFree(12);
  }
}


void stand_erect()
{
  while (BIT_L2)
  {
    //Set_Pos_All(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
    //delay(20);
    Set_Pos_All(0, 500, 0, 0, 0, -500, 0, 0, 0, 0, 0, 0, 0);
    delay(20);
    // ReadVS2();
    if (BIT_down || BIT_batu || BIT_select || BIT_up || BIT_sankaku)
      break;
  }

  /*
  // wake up front
  if (BIT_R2)
  {
    Set_Pos_All(0, 0, 9000, 0, 0, 0, -9000, 0, 0, 0, -4000, 0, 4000); //直立
    delay(100);
    Set_Pos_All(0, 0, 9000, 0, 0, 0, -9000, 0, 0, 0, 0, 0, 0); //直立
    delay(100);
    krs.setStrc(1, 60);
    krs.setStrc(4, 60);
    krs.setStrc(5, 60);
    krs.setStrc(8, 60);
    krs.setStrc(10, 60);
    krs.setStrc(12, 60);

    Set_Pos_All(0, 2000, 9000, -3000, 2000, -2000, -9000, 3000, -2000, 0, 8000, 0, -8000); //直立
    delay(100);
    Set_Pos_All(0, 5000, 9000, -9000, 5000, -5000, -9000, 9000, -5000, -6000, 8000, 6000, -8000); //直立
    delay(100);
    Set_Pos_All(0, 8000, 9000, -9000, 5000, -8000, -9000, 9000, -5000, -9000, 9000, 9000, -9000);
    delay(80);
    Set_Pos_All(0, 7000, 9000, -9000, 4500, -7000, -9000, 9000, -4500, -9000, -4500, 9000, 4500);
    delay(30);
    while (BIT_R2)
    {
      Set_Pos_All(0, 7000, 9000, -9000, 2000, -7000, -9000, 9000, -2000, -9000, -3000, 9000, 3000);
      delay(20);
      // ReadVS2();
    }
    Set_Pos_All(0, -500, 7500, -9000, 7000, 500, -7500, 9000, -7000, -9000, 0, 9000, 0);
    delay(30);
    Set_Pos_All(0, 0, 9000, -9000, 7000, 0, -9000, 9000, -7000, 0, 0, 0, 0);
    delay(50);
    Set_Pos_All(0, 2000, 5000, -4000, 2000, -2000, -5000, 4000, -2000, 0, -4500, 0, 4500);
    delay(100);
  }
  */

  // wake up 俯せ
  if (BIT_down || BIT_batu)
  {
    Set_Pos_All(0, 0, 9000, 0, 0, 0, -9000, 0, 0, 0, -4000, 0, 4000); //直立
    delay(100);
    Set_Pos_All(0, 0, 9000, 0, 0, 0, -9000, 0, 0, 0, 0, 0, 0); //直立
    delay(100);
    krs.setStrc(1, 60);
    krs.setStrc(4, 60);
    krs.setStrc(5, 60);
    krs.setStrc(8, 60);
    krs.setStrc(10, 60);
    krs.setStrc(12, 60);

    Set_Pos_All(0, 2000, 9000, -3000, 2000, -2000, -9000, 3000, -2000, 0, 8000, 0, -8000); //直立
    delay(100);
    for (int i = 0; i <= 15; i++)
    {
      Set_Pos_All(0, 2000 + 400 * i, 9000, -3000 - 400 * i, 2000 + 60 * i, -2000 - 400 * i, -9000, 3000 + 400 * i, -2000 - 60 * i, -600 * i, 8000, 600 * i, -8000);
      delay(10);
    }
    Set_Pos_All(0, 8000, 9000, -9000, 5000, -8000, -9000, 9000, -5000, -9000, 9000, 9000, -9000);
    delay(80);
    Set_Pos_All(0, 7000, 9000, -9000, 5000, -7000, -9000, 9000, -5000, -9000, -2000, 9000, 2000);
    delay(30);
    /*2/26
    Set_Pos_All(0, 7000, 9000, -9000, 4500, -7000, -9000, 9000, -4500, -9000, -4900, 9000, 4900);
    delay(30);
    */
    while (BIT_down || BIT_batu)
    {
      Set_Pos_All(0, 7000, 9000, -9000, 8000, -7000, -9000, 9000, -8000, -9000, -2000, 9000, 2000);
      delay(20);
      /*2/26
      Set_Pos_All(0, 7000, 9000, -9000, 8000, -7000, -9000, 9000, -8000, -9000, -4500, 9000, 4500);
      delay(20);*/
      // ReadVS2();
    }


    for (int i = 0; i <= 20/2; i++)
    {
      Set_Pos_All(0, 7000 - 100 * i*2, 9000, -9000, 8000 - 100 * i*2, -7000 + 100 * i*2, -9000, 9000, -8000 + 100 * i*2, -9000, -1000, 9000, 1000);
      delay(10);
    }
    /*2/26
    Set_Pos_All(0, 7000 - 100 * i, 9000, -9000, 4500 - 25 * i, -7000 + 100 * i, -9000, 9000, -4500 + 25 * i, -9000, -4500, 9000, 4500);
      delay(10);*/
    //Set_Pos_All(0, 5000, 9000, -9000, 6000, 5000, -9000, 9000, -6000, -9000, -1000, 9000, 1000);
    for (int i = 0; i <= 15/2; i++)
    {
      Set_Pos_All(0, 5000 - 200 * i*2, 9000 - 300 * i*2, -9000 + 300 * i*2, 6000 - 200 * i*2, -5000 + 200 * i*2, -9000 + 300 * i*2, 9000 - 300 * i*2, -6000 + 200 * i*2, -3000, -1000 + 100 * i*2, 3000, 1000 - 100 * i*2);
      delay(5);
      /*2/26
      Set_Pos_All(0, 5000 - 200 * i, 9000 - 300 * i, -9000 + 300 * i, 4500 - 100 * i, -5000 + 200 * i, -9000 + 300 * i, 9000 - 300 * i, -4500 + 100 * i, -9000, -4500 + 200 * i, 9000, 4500 - 200 * i);
      delay(5);
      */
    }
    for (int i = 0; i <= 10; i++)
    {
      Set_Pos_All(0, 2000, 4000, -4000, 3000, -2000, -4000, 4000, -3000, -3000 + 300 * i, -500, 3000 - 300 * i, 500);
      delay(5);
    }
    //Set_Pos_All(0, 2000, 4000, -4000, 2000, -2000, -4000, 4000, -2000, 0, -4900, 0, 4900);
    //delay(100);
  }
  
  /*元のデータ
  // wake up front slowly
  if (BIT_down || BIT_batu)
  {
    Set_Pos_All(0, 0, 9000, 0, 0, 0, -9000, 0, 0, 0, -4000, 0, 4000); //直立
    delay(100);
    Set_Pos_All(0, 0, 9000, 0, 0, 0, -9000, 0, 0, 0, 0, 0, 0); //直立
    delay(100);
    krs.setStrc(1, 60);
    krs.setStrc(4, 60);
    krs.setStrc(5, 60);
    krs.setStrc(8, 60);
    krs.setStrc(10, 60);
    krs.setStrc(12, 60);

    Set_Pos_All(0, 2000, 9000, -3000, 2000, -2000, -9000, 3000, -2000, 0, 8000, 0, -8000); //直立
    delay(100);
    for (int i = 0; i <= 15; i++)
    {
      Set_Pos_All(0, 2000 + 200 * i, 9000, -3000 - 400 * i, 2000 + 60 * i, -2000 - 200 * i, -9000, 3000 + 400 * i, -2000 - 60 * i, -600 * i, 8000, 600 * i, -8000);
      delay(20);
    }
    Set_Pos_All(0, 8000, 9000, -9000, 5000, -8000, -9000, 9000, -5000, -9000, 9000, 9000, -9000);
    delay(80);
    Set_Pos_All(0, 7000, 9000, -9000, 4500, -7000, -9000, 9000, -4500, -9000, -4900, 9000, 4900);
    delay(30);
    while (BIT_down || BIT_batu)
    {
      Set_Pos_All(0, 7000, 9000, -9000, 2000, -7000, -9000, 9000, -2000, -9000, -4500, 9000, 4500);
      delay(20);
      // ReadVS2();
    }
    Set_Pos_All(0, -500, 7500, -9000, 7000, 500, -7500, 9000, -7000, -9000, 0, 9000, 0);
    delay(30);
    Set_Pos_All(0, 0, 9000, -9000, 7000, 0, -9000, 9000, -7000, 0, 0, 0, 0);
    delay(50);
    Set_Pos_All(0, 1000, 5000, -4000, 4000, -1000, -5000, 4000, -4000, 0, -4000, 0, 4000);
    delay(100);
    Set_Pos_All(0, 2000, 5000, -4000, 2000, -2000, -5000, 4000, -2000, 0, -4000, 0, 4000);
    delay(100);
  }
  */

  /*
  // wake up back
  else if (BIT_L2)
  {
    Set_Pos_All(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0); //直立
    delay(100);
    Set_Pos_All(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 9000, 0, -9000); //直立
    delay(100);
    krs.setSpd(2, 90);
    krs.setSpd(3, 70);
    krs.setSpd(6, 90);
    krs.setSpd(7, 70);
    krs.setSpd(9, 50);
    krs.setSpd(10, 70);
    krs.setSpd(11, 50);
    krs.setSpd(12, 70);
    krs.setStrc(1, 60);
    krs.setStrc(4, 60);
    krs.setStrc(5, 60);
    krs.setStrc(8, 60);
    krs.setStrc(10, 60);
    krs.setStrc(12, 60);
    Set_Pos_All(0, 8000, 9000, -9000, 5000, -8000, -9000, 9000, -5000, -9000, 9000, 9000, -9000);
    delay(100);
    Set_Pos_All(0, 8000, 9000, -9000, 5000, -8000, -9000, 9000, -5000, 9000, 9000, -9000, -9000);
    delay(80);
    Set_Pos_All(0, 7500, 9000, -9000, 4500, -7500, -9000, 9000, -4500, 9000, -3000, -9000, 3000);
    delay(80);
    while (BIT_L2)
    {
      Set_Pos_All(0, 7500, 9000, -9000, 3000, -7500, -9000, 9000, -3000, 9000, -3000, -9000, 3000);
      delay(20);
      // ReadVS2();
    }
    Set_Pos_All(0, 7500, 9000, -9000, 7000, -7500, -9000, 9000, -7000, 0, -3000, 0, 3000);
    delay(150);
    Set_Pos_All(0, 1500, 9000, -9000, 7000, -1500, -9000, 9000, -7000, 0, -3000, 0, 3000);
    delay(30);
    Set_Pos_All(0, 0, 9000, -9000, 6000, 0, -9000, 9000, -6000, 0, -3000, 0, 3000);
    delay(100);
    Set_Pos_All(0, 2000, 4500, -4000, 2000, -2000, -4500, 4000, -2000, 0, -3000, 0, 3000);
    delay(100);
    krs.setSpd(2, 127);
    krs.setSpd(3, 127);
    krs.setSpd(6, 127);
    krs.setSpd(7, 127);
    krs.setSpd(9, 127);
    krs.setSpd(10, 127);
    krs.setSpd(11, 127);
    krs.setSpd(12, 127);
    delay(50);
    Set_Pos_All(0, 3000, 4000, -4000, 3000, -3000, -4000, 4000, -3000, 0, -4500, 0, 4500);
    delay(100);
  }
  */

  // wake up 仰向け
  else if (BIT_up || BIT_sankaku)
  {
    Set_Pos_All(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0); //直立
    delay(100);
    krs.setSpd(2, 90);
    krs.setSpd(3, 70);
    krs.setSpd(6, 90);
    krs.setSpd(7, 70);
    krs.setSpd(9, 50);
    krs.setSpd(10, 70);
    krs.setSpd(11, 50);
    krs.setSpd(12, 70);
    krs.setStrc(1, 60);
    krs.setStrc(4, 60);
    krs.setStrc(5, 60);
    krs.setStrc(8, 60);
    krs.setStrc(10, 60);
    krs.setStrc(12, 60);
    for (int i = 0; i <= 10/2; i++)
    {
      Set_Pos_All(0, 200 * i*2, 400 * i*2, -300 * i*2, 200 * i*2, -200 * i*2, -400 * i*2, 300 * i*2, -200 * i*2, 0, 800 * i*2, 0, -800 * i*2);
      delay(20);
    }
    for (int i = 0; i <= 15/2; i++)
    {
      Set_Pos_All(0, 2000 + 200 * i*2, 4000 + 1000 / 3 * i*2, -3000 - 400 * i*2, 2000 + 60 * i*2, -2000 - 200 * i*2, -4000 - i*2 * 1000 / 3, 3000 + 400 * i*2, -2000 - 60 * i*2, 600 * i*2, 8000, -600 * i*2, -8000);
      delay(20);
    }
    Set_Pos_All(0, 8000, 9000, -9000, 6000, -8000, -9000, 9000, -6000, 9000, 9000, -9000, -9000);
    delay(80);
    Set_Pos_All(0, 7500, 9000, -9000, 7000, -7500, -9000, 9000, -7000, 9000, -3000, -9000, 3000);
    delay(80);
    while (BIT_up || BIT_sankaku)
    {
      Set_Pos_All(0, 7500, 9000, -9000, 8000, -7500, -9000, 9000, -8000, 9000, -2000, -9000, 2000);
      delay(20);
      // ReadVS2();
    }
    Set_Pos_All(0, 7500, 9000, -9000, 7500, -7500, -9000, 9000, -7500, 0, -2000, 0, 2000);
    delay(100);
    for (int i = 0; i <= 10; i++)
    {
      Set_Pos_All(0, 7500 - 400 * i, 9000, -9000, 7500 - 300 * i, -7500 + 400 * i, -9000, 9000, -7500 - 300 * i, 600 * i, 3000, -600 * i, -3000);
      delay(20);
    }
    //Set_Pos_All(0, 3500, 9000, -9000, 4500, -3500, -9000, 9000, -4500, 0, -3000, 0, 3000);
    //delay(30);
    //Set_Pos_All(0, 0, 9000, -9000, 6000, 0, -9000, 9000, -6000, 0, -3000, 0, 3000);
    //delay(100);
    Set_Pos_All(0, 2000, 4500, -4000, 2000, -2000, -4500, 4000, -2000, 0, -3000, 0, 3000);
    delay(80);
    krs.setSpd(2, 127);
    krs.setSpd(3, 127);
    krs.setSpd(6, 127);
    krs.setSpd(7, 127);
    krs.setSpd(9, 127);
    krs.setSpd(10, 127);
    krs.setSpd(11, 127);
    krs.setSpd(12, 127);
    delay(50);
    Set_Pos_All(0, 2000, 4000, -4000, 2000, -2000, -4000, 4000, -2000, 0, -4500, 0, 4500);
    delay(50);
  }

/*2/26
Set_Pos_All(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0); //直立
    delay(100);
    krs.setSpd(2, 90);
    krs.setSpd(3, 70);
    krs.setSpd(6, 90);
    krs.setSpd(7, 70);
    krs.setSpd(9, 50);
    krs.setSpd(10, 70);
    krs.setSpd(11, 50);
    krs.setSpd(12, 70);
    krs.setStrc(1, 60);
    krs.setStrc(4, 60);
    krs.setStrc(5, 60);
    krs.setStrc(8, 60);
    krs.setStrc(10, 60);
    krs.setStrc(12, 60);
    for (int i = 0; i <= 10; i++)
    {
      Set_Pos_All(0, 200 * i, 400 * i, -300 * i, 200 * i, -200 * i, -400 * i, 300 * i, -200 * i, 0, 800 * i, 0, -800 * i);
      delay(20);
    }
    for (int i = 0; i <= 15; i++)
    {
      Set_Pos_All(0, 2000 + 200 * i, 4000 + 1000 / 3 * i, -3000 - 400 * i, 2000 + 60 * i, -2000 - 200 * i, -4000 - i * 1000 / 3, 3000 + 400 * i, -2000 - 60 * i, 600 * i, 8000, -600 * i, -8000);
      delay(20);
    }
    Set_Pos_All(0, 8000, 9000, -9000, 5000, -8000, -9000, 9000, -5000, 9000, 9000, -9000, -9000);
    delay(80);
    Set_Pos_All(0, 7500, 9000, -9000, 4500, -7500, -9000, 9000, -4500, 9000, -3000, -9000, 3000);
    delay(80);
    while (BIT_up || BIT_sankaku)
    {
      Set_Pos_All(0, 7500, 9000, -9000, 3000, -7500, -9000, 9000, -3000, 9000, -3000, -9000, 3000);
      delay(20);
      // ReadVS2();
    }
    Set_Pos_All(0, 7500, 9000, -9000, 7000, -7500, -9000, 9000, -7000, 0, -3000, 0, 3000);
    delay(150);
    Set_Pos_All(0, 1500, 9000, -9000, 7000, -1500, -9000, 9000, -7000, 0, -3000, 0, 3000);
    delay(30);
    Set_Pos_All(0, 0, 9000, -9000, 6000, 0, -9000, 9000, -6000, 0, -3000, 0, 3000);
    delay(100);
    Set_Pos_All(0, 2000, 4500, -4000, 2000, -2000, -4500, 4000, -2000, 0, -3000, 0, 3000);
    delay(100);
    krs.setSpd(2, 127);
    krs.setSpd(3, 127);
    krs.setSpd(6, 127);
    krs.setSpd(7, 127);
    krs.setSpd(9, 127);
    krs.setSpd(10, 127);
    krs.setSpd(11, 127);
    krs.setSpd(12, 127);
    delay(50);
    Set_Pos_All(0, 2000, 4000, -4000, 2000, -2000, -4000, 4000, -2000, 0, -4500, 0, 4500);
    delay(100);
  }
*/

}


void Test()
{
  Set_Pos_All(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
  delay(30);
  while (BIT_sankaku)
  {
    Set_Pos_All(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
    delay(40);
  }
}